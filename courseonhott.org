#+TITLE: Course on Homotopy Type Theory
#+DESCRIPTION: Notes following the course on homotopy type theory by Robert Harper

#+SETUPFILE: math-en.setup
#+SETUPFILE: html.setup
#+SETUPFILE: essay.setup
#+LANGUAGE: en
#+OPTIONS: toc:nil
#+TODO: TODO WIP | CHECK DONE

* Lecture 1: Intuitionistic Type Theory
** Intuitionistic Type Theory (TT),
The *Intuitionistic Type Theory* is based on the work of Per
Martin-LÃ¶f on the 1970s.  It is an analysis and expansion of Brouwer's
intuitionism.

** Intensional Type Theory (ITT)
The *Intensional Type Theory* will be our base theory. Other forms of
type theory are extensions of this one.

** Extensional Type Theory (ETT)
The *Extensional Type Theory* has the core of ITT plus the principles
of equality reflection (ER) and uniqueness of the identity proofs
(UIP).

This is the intuitionistic theory of sets in which NuPRL is based.
It is a form of constructive set theory, developed by Bishop; where
types are treated as sets.

** Homotopy Type Theory (HoTT)
The *Homotopy Type Theory* is an elaboration of ITT with higher
inductive types (HIT) and the univalence axiom (UA).

It is an intuitionistic theory of weak $\infty\text{-groupoids}$. Here types
are spaces in an abstract sense.
** Brower's program
The *Brower's program* is a philosophy of mathematics based on the
following ideas
 
 1. mathematics is a human social activity. The focus is on the /language/
    as a tool for communication of mathematical concepts.

 2. the fundamental human capability is the understanding an execution
    of /algorithms/ for performing /constructions/. Proofs are forms
    of construction.

In this setting, the only way to describe infinite things is by
communicate them with an algorithm. 

*** Proof relevance
From the second point, arises the principle of *proof relevance*.
Proofs are mathematical objects that we can see an manipulate. In
other foundations of mathematics, only a limiting enumerable set of
formal proofs can be viewed as proofs.

*** Proof relevance in HoTT
In HoTT, our proofs will be paths in a space. This conception
will provide a synthetic way of working with homotopy which is a
cleaner, shorter and mechanizable way writting proofs.

*** Synthetic perspective in mechanized reasoning
Synthetic geometry is what Euclides did; analytic geometry is what
Descartes did. The traditional formulation of Homotopy Theory, using
euclidean spaces and topology, is an analytic one. Synthetic
formulations of Homotopy Theory are based on Quillen model categories or
HoTT.

This distinction of synthetic and analytical is due to Lawvere.

/Twelf vs Coq is another example/
** Type Theory
Type theory is an analysis and codification of Brower's intuitionism
drawning on Gentzen's proof theory. Types classify the admisible
constructions. A type is defined by

 * *introduction rules*, showing how to make a construction.
 * *elimination rules*, showing how to use a construction.

linked by the *inversion principle*, or principle of conservation of
proofs; stating that the introduction is inverse to the elimination.
This inversion principle is the basis for the computational content
of our language.

** Axiomatic freedom of constructive mathematics
In the Hilbert/Brouwer debate, Hilbert believed that Brouwer was negating
everything that has been done so far; but, as fewer assumptions lead to
stronger results, the exclusion of certain principles leads only to axiomatic
freedom.

For example, the law of excluded middle is not negated on constructive
mathematics, they are simply independent of it; but it can still be
taken as an hypothesis on certain subfields.

We can now include certain assumptions locally, and so, the
constructivity is not a limitation.
** Computational aspect
Type theory acts as an unified theory of computation. Programming
languages and computation are particular manifestations of this
unified theory.

** Computational trinitarianism

\[\begin{tikzcd}[row sep=huge, col sep=tiny]
& \begin{matrix}\text{Type}\\ \text{Theory}\end{matrix} \drar[to-to]\dlar[to-to] & \\
\text{Logic}\arrow[rr,to-to] & & \begin{matrix}\text{Category}\\ \text{Theory}\end{matrix}
\end{tikzcd}\]

There is a complete correspondence between the three theories.
** Intuitionistic logic
*Intuitionistic logic* is based on the principles of intuitionism.
It has the following judgements

 1. $A$ is a proposition.
 2. $A$ is a true proposition, it has a proof.

We do not expect that a proposition is either provable or refutable.
We assume also /open-endedness/, we cannot write all the proofs in a
systematic way.

** Negative fragment of intuitionistic propositional logic
We will write a grammar of proofs.

 * The trivially true proposition, this is the *truth-formation*
   rule

   \begin{prooftree}
   \RightLabel{(T-form)}
   \AxiomC{}
   \UnaryInfC{T prop}
   \end{prooftree}

   this trivially true proposition is true

   \begin{prooftree}
   \RightLabel{(T-intro)}
   \AxiomC{}
   \UnaryInfC{T true}
   \end{prooftree}

   but there is no truth elimination rule, as we are not using any
   information when we write this proposition.

 * Conjunction formation

   \begin{prooftree}
   \RightLabel{($\wedge$-form)}
   \AxiomC{A prop}
   \AxiomC{B prop}
   \BinaryInfC{A $\wedge$ B prop}
   \end{prooftree}

   conjunction introduction

   \begin{prooftree}
   \RightLabel{($\wedge$-intro)}
   \AxiomC{A true}
   \AxiomC{B true}
   \BinaryInfC{A $\wedge$ B true}
   \end{prooftree}
   
   we will use two elimination rules to extract the two pieces 
   of information that went into that fact.

   \begin{prooftree}
   \RightLabel{($\wedge$-elim$_1$)}
   \AxiomC{A $\wedge$ B true}
   \UnaryInfC{A true}
   \RightLabel{($\wedge$-elim$_2$)}
   \AxiomC{A $\wedge$ B true}
   \UnaryInfC{B true}
   \noLine
   \BinaryInfC{}
   \end{prooftree}

 * Implication formation

   \begin{prooftree}
   \RightLabel{($\supset$-form)}
   \AxiomC{A prop}
   \AxiomC{B prop}
   \BinaryInfC{A $\supset$ B prop}
   \end{prooftree}

   and implication introduction, which uses only entailment

   \begin{prooftree}
   \RightLabel{($\supset$-intro)}
   \AxiomC{A true $\vdash$ B true}
   \UnaryInfC{A $\supset$ B true}
   \end{prooftree}

   in the Hilbert formulations of logic, we supress the difference
   between entailment and implication. The logical entailment is prior
   to the implication, it is a map of proofs; while the implication only
   captures that into the logic. The elimination rule is the modus ponens

   \begin{prooftree}
   \RightLabel{($\supset$-elim)}
   \AxiomC{A $\supset$ B true}
   \AxiomC{A true}
   \BinaryInfC{B true}
   \end{prooftree}

* Lecture 2: Intuitionistic Propositional Logic
** Negative fragment of intuitionistic propositional logic
We have talked about

 * the Gentzen principle of conservation of evidence.
 * the truth value.
 * the conjunction.
 * the implication.

Why are these "correct" rules? We are keeping a correspondence between
introduction and elimination rules; that is the beauty of the Gentzen
system and what gives rise to the computational interpretation.

These are not arbitrary rules, there is a coherence that is being kept.
** Structural properties of entailment
The concept of *logical entailment* is a compound judgement. It express
the idea of a conclusion derived from a set of assumptions

\[\underbrace{
A_1 \text{ true},
A_2 \text{ true},
\dots,
A_n \text{ true}}_{\Gamma}
\vdash
A
\]

Logical entailment is a mapping between propositions.
The properties of logical entailment (aka hypothetical judgement) are
the following properties
 
 1. Reflexivity (R), $A \text{ true} \vdash A \text{ true}$.
 2. Transitivity (T),
    
    \begin{prooftree}
    \RightLabel{(T)}
    \AxiomC{$\Gamma_1 \vdash A$ true}
    \AxiomC{$\Gamma_2,A$ true $\vdash B$ true}
    \BinaryInfC{$\Gamma_1,\Gamma_{2} \vdash B$ true}
    \end{prooftree}

    in presence of the weakening, contraction, and exchange properties,
    this can be rewritten using only a $\Gamma$.

 3. Weakening (W),
    
    \begin{prooftree}
    \RightLabel{(W)}
    \AxiomC{$\Gamma$ $\vdash A$ true}
    \UnaryInfC{$\Gamma,B$ true $\vdash A$ true}
    \end{prooftree}

    where the two first properties are fundamental, and this third is
    not as fundamental. You can consider deniying this principle, and
    you will arrive at the notion of /relevant entitlement/, where every
    assumption has to be used in the entitlement.

 4. Contraction (C), 
    
    \begin{prooftree}
    \RightLabel{(C)}
    \AxiomC{$\Gamma,A$ true,$A$ true $\vdash B$ true}
    \UnaryInfC{$\Gamma, A$ true $\vdash B$ true}
    \end{prooftree}

    in certain logics, we may will want to keep an accounting of
    how many times have we used a lemma; we will have to deny this
    property.

 5. Exchange (E), the order of the assumptions does not matter

    \begin{prooftree}
    \RightLabel{(C)}
    \AxiomC{$\Gamma \vdash A$ true}
    \UnaryInfC{$\pi(\Gamma) \vdash A$ true}
    \end{prooftree}

    where $\pi$ is any permutation.

When any of these properties fail, we talk of substructural entailment.

** Local form
We are writing the rules in local form. They can be used in the same
way on the presence of assumptions. A $\Gamma$ could be added to all
the rules to obtain the global form. It is implied in our rules.

There are certain scenarios in which we will want $\Gamma$ to be explicitely
empty.

** Order-theoretic formulation
Let us define $A \leq B$, an order on propositions, meaning that
$A \text{ true} \vdash B \text{ true}$.

*** Preorder
This is a preorder,

  * it is reflexive,

    \begin{prooftree}
    \RightLabel{($\leq$-refl)}
    \AxiomC{}
    \UnaryInfC{$A \leq A$}
    \end{prooftree}


  * it is transitive,

    \begin{prooftree}
    \RightLabel{($\leq$-trans)}
    \AxiomC{$A \leq B$}
    \AxiomC{$B \leq C$}
    \BinaryInfC{$A \leq C$}
    \end{prooftree}

  * we have a greatest, final element

    \begin{prooftree}
    \RightLabel{($\leq_\top$)}
    \AxiomC{}
    \UnaryInfC{$A \leq \top$}
    \end{prooftree}
   
  * we have meets given by conjunction. That is, there is a lower
    bound

    \begin{prooftree}
    \RightLabel{($\leq,\wedge_1$)}
    \AxiomC{}
    \UnaryInfC{$A \wedge B \leq A$}
    \RightLabel{($\leq,\wedge_2$)}
    \AxiomC{}
    \UnaryInfC{$A \wedge B \leq B$}
    \noLine
    \BinaryInfC{}
    \end{prooftree}

    which is also universal

    \begin{prooftree}
    \RightLabel{($\leq,\wedge$-bound)}
    \AxiomC{$C \leq A$}
    \AxiomC{$C \leq B$}
    \BinaryInfC{$C \leq A \wedge B$}
    \end{prooftree}

Those follow from the properties of entailment. We can draw those
properties with Hasse diagrams, where we can see a similarity with
a product diagram on category theory

\[\begin{tikzcd}[column sep=tiny]
& C \dar[dashed] \ar[ddr,bend left]\ar[ddl, bend right] & \\
& A \wedge B \drar\dlar & \\
A & & B &.
\end{tikzcd}\]

*** Antisymmetry and equivalence
We have now a lower semilattice. Sometimes, lower semilattices are
defined to be partial orders, where we have antisymmetry

    \begin{prooftree}
    \RightLabel{}
    \AxiomC{$A \leq B$}
    \AxiomC{$B \leq A$}
    \BinaryInfC{$A = B$}
    \end{prooftree}

but we are going to work without antisymmetry. We haven't talked yet
about equality, but we are going to introduce the univalent principle.
We could define $A \simeq B$ when $A \leq B$ and $B \leq A$, they are not equal,
but equivalent. We could also work with equivalence classes $[A]_{\simeq}$ here.
Univalence will imply the equality of equivalent propositions.

** Positive fragment of IPL
Now we write the grammar of the positive fragment

 * The false proposition, this is the *false-formation* rule

   \begin{prooftree}
   \RightLabel{($\bot$-form)}
   \AxiomC{}
   \UnaryInfC{$\bot$ prop}
   \end{prooftree}

   there is no introduction rule, only an elimination rule

   \begin{prooftree}
   \RightLabel{($\bot$-elim)}
   \AxiomC{$\bot$ true}
   \UnaryInfC{A true}
   \end{prooftree}

   since there is no introduction rule and this never happens,
   this preserves the coherence principle.

 * Disjunction formation

   \begin{prooftree}
   \RightLabel{($\vee$-form)}
   \AxiomC{A prop}
   \AxiomC{B prop}
   \BinaryInfC{A $\vee$ B prop}
   \end{prooftree}

   disjunction introduction

   \begin{prooftree}
   \RightLabel{($\vee$-intro$_{1}$)}
   \AxiomC{A true}
   \UnaryInfC{A $\vee$ B true}
   \RightLabel{($\vee$-intro$_{2}$)}
   \AxiomC{B true}
   \UnaryInfC{A $\vee$ B true}
   \noLine
   \BinaryInfC{}
   \end{prooftree}
   
   we will use an elimination rule to extract the piece of
   of information that went into that fact as in

   \begin{prooftree}
   \RightLabel{($\vee$-elim)}
   \AxiomC{A $\vee$ B true}
   \AxiomC{A true $\vdash$ C true}
   \AxiomC{B true $\vdash$ C true}
   \TrinaryInfC{C true}
   \end{prooftree}

** Order-theoretical properties
We have now a least or initial element,
 
    \begin{prooftree}
    \RightLabel{($\leq$-$\bot$)}
    \AxiomC{}
    \UnaryInfC{$\bot \leq A$}
    \end{prooftree}

and joins or upper bounds

    \begin{prooftree}
    \RightLabel{($\leq,\vee_1$)}
    \AxiomC{}
    \UnaryInfC{$A \leq A \vee B$}
    \RightLabel{($\leq,\vee_2$)}
    \AxiomC{}
    \UnaryInfC{$A \leq A \vee B$}
    \noLine
    \BinaryInfC{}
    \end{prooftree}

where the bound is the least upper bound

    \begin{prooftree}
    \RightLabel{($\leq,\vee$-bound)}
    \AxiomC{$A \leq C$}
    \AxiomC{$B \leq C$}
    \BinaryInfC{$A \vee B \leq C$}
    \end{prooftree}

Note that those bounds are unique up to equivalence, as they follow
also a categorical universal diagram, in this case, the coproduct
diagram

\[\begin{tikzcd}[column sep=tiny]
A \drar\ar[ddr, bend right] & & B \dlar\ar[ddl, bend left] \\
& A \vee B \dar[dashed] & \\
& C  & &.
\end{tikzcd}\]

This is a lattice, that has all finite meets and joins.

** Order-theoretic formulation of the implication
We have an exponential $B^A$ whenever $A \supset B$, this is defined
as the property

\begin{prooftree}
\AxiomC{}
\UnaryInfC{$A\wedge (A \supset B) \leq B$}
\end{prooftree}

and the exponential is the universal element with this property

\begin{prooftree}
\AxiomC{$A \wedge C \leq B$}
\UnaryInfC{$C \leq A \supset B$}
\end{prooftree}

** Heyting algebra
A *Heyting algebra* is a lattice with exponentials.

*** Yoneda Lemma
The Yoneda Lemma on lattices says that

$a \leq b \iff \left(\forall x: x \leq a \implies x \leq b\right)$.

It is trivial by transitivity and identity. This is
an instance of a more general fact.
** Negation
We define $\neg A := A \supset \bot$. It is the largest proposition inconsistent
with $A$, the largest proposition such that $A \wedge \neg A \leq \bot$.

** Complement
We define $\overline{A}$ as the universal element with the property that $\top \leq A \vee \overline{A}$
and $\overline{A} \wedge A \leq \bot$.

We have a complement distributive algebra (a boolean algebra!) and such thing
has exponentials.

\begin{prooftree}
\AxiomC{$\top \leq A \vee C$}
\UnaryInfC{$\overline{A} \leq C$}
\end{prooftree}

** Boolean algebra
A *boolean algebra* is a complemented distributive lattice. Therefore, it has
exponentials, defined as $B^A := \overline{A} \vee B$.

** Completeness theorem
If $A \leq B$ in every Heyting algebra, it must be deducible that $A \vdash B$.
If something is valid in all models, in all Heyting algebras, it must be
provable.

This logic is complete for Heyting algebras, but it is not going to be
complete for boolean algebras. $A \vee \neg A$ is not going to be provable in
our logic.

*** Proof
If something is provable in every Heyting algebra, you can construct the
propositional *Lindenbaum algebra*; and this is used to show completenaess.
If $A \leq B$ holds in every Heyting algebra, then $A \text{ true} \vdash B \text{ true}$. We
need to interpret the propositions as elements on a Heyting algebra.

*** Converse
If something is provable, it holds in every Heyting algebra. 

** Issue: negation and complement
In a boolean algebra, $A \vee \neg A \simeq \top$.

* Lecture 3: Propositions as Types
** Last week
Last week we saw IPL from a provability perspective. $A$ is true if it
has a proof, and $A$ is false if it has a refutation. We got the
structure of Heyting algebra (a lattice (partial order with all finite
meets and joins) and exponentials). Every Heyting algebra is
distributive. We defined the negation.

*** Soundness incompleteness result
$\Gamma \vdash A$ true iff $\Gamma^{\ast} \leq A^{\ast}$ in every Heyting algebra.

*** Boolean and Heyting algebras
Not every boolean algebra is a Heyting algebra, but every Heyting
algebra is a boolean algebra.

*** DeMorgan Duality
$\overline{A \wedge B} = \overline{A} \vee \overline{B}$ and $\overline{A \vee B} = \overline{A} \wedge \overline{B}$.

** Claim
In IPL, not all instances of LEM are provable. We cannot prove
in general that $A \vee \neg A \text{ true}$.

*** Idea
The disjunction property says that if $A \vee B \text{ true}$, then $A$ true
or $B$ true. This would imply that LEM gives us a proof or a
refutation of every element.

** There exists a Heyting algebra which is not a boolean algebra
We need only a countermodel, a Heyting algebra where $\top \leq A \vee \neg A$
does not hold. It will show that this is not provable in general
in IPL.

** Decidable proposition
A proposition is *decidable* iff $A \vee \neg A \text{ true}$. There are decidable
propositions even if LEM does not hold.

*** Example
Two decidable propositions are $\bot$ and $\top$.

Equality on natural numbers will be decidable, but equality on reals
will not.
** Stable proposition
A proposition is *stable* iff $(\neg \neg A) \supset A \text{ true}$.

** Negation of the negation of LEM
We can prove $\neg \neg (A \vee \neg A)$. This proves that not every proposition
is stable as a corollary.

*** Proof
We will assume $\neg (A \vee \neg A)$ and arrive at a contradiction. If we
assume $A$, we have $A \vee \neg A$, and then a contradiction, so it must
be the case that $\neg A$. We know now that $A \vee \neg A$, arriving at a
contradiction.

** Prove the disjunction property for IPL
We interpret the rules of IPL as an inductive definition of
the entailment relation.

We have finitary derivation trees of every $\Gamma \vdash A$.

*** Disjunction property: formal statement
If $\varnothing \vdash A \vee B \text{ true}$, then $\varnothing \vdash A \text{ true}$ or $\varnothing \vdash B \text{ true}$.

**** Counterexample if the context were not empty
If we take $A \vee B$ as an assumption, this would trivially
not hold.
*** Disjunction property: draft of a proof
We will use an induction on derivations. We examine all possible
derivations $\varnothing \vdash A \vee B \text{ true}$ and show that there are derivations of
$A$ or $B$ also.

The last step of a derivation of $A \vee B$ should be an introduction
$\vee-I_{1}$ or $\vee-I_2$; so there should be a derivation of $A$ or $B$ in
the previous step. The assumption rule is also not applicable.
Conjunction introduction is not applicable, and the same hold for
true introduction and implication introduction. Elimination rules
are our real problem here. For example, implication elimination should
be proved.

To prove this for the implication elimination rule, we suppose that
we have the derivations for $\vdash C$ and $C \vdash (A \vee B)$, and then we could
inline the first derivation using transitivity of entailment to get
a derivation of $\vdash A \vee B$. Note that this is not a complete proof! the
derivation of $C \supset (A \vee B)$ could have be done by other elimination
rules and we should prove that for them too.
** Structural properties are admissible
*Weakening is admissible*, if $\Gamma \vdash_{IPL} B\text{ true}$, then $\Gamma,A \text{ true} \vdash_{IPL} B \text{ true}$.
If you give a derivation of the first, you can get a derivation of the
second one.

*** Why is weakening admissible
Because the rules are polymorphic! They do not depend of Gamma. We
could inductively weaken every step $\Gamma \mapsto \Gamma,A\text{ true}$, and then, reapplying
the rules, would give us the same conclusion.

*** Similarly
You could do exchange or contraction. But reflexivity is a primitive rule!
Transitivity for $\text{IPL}^{-}$ is homework.
*** We have now defined a good logic
It is not simply a bunch of rules, they follow a criteria. The
structural properties should hold. There are substructural logics,
but those are not our topic of interest.
** Gentzen's insight
Our previous idea to prove the disjunction property uses crucially an
inversion principle between implication introduction and implication
elimination.

*ELIM is post-inverse to INTRO.*

We are saying something like the following for introductions, eliminations
and derivations.

 * $(\wedge E_1 \circ \wedge I)({\cal D}_1,{\cal D}_2) = {\cal D}_1$

This gives rise to a dynamics of proof! We do not only look at provability,
we look at the proofs per se.

** II. Proof relevant logic
We will write a grammar of proofs. $M : A$ means that $M$ is a proof
of $A$. In correspondence with the assumptions, there is the concept
of variables

\[ x_1:A_1, \dots , x_n:A_n \vdash M : A.\]

Transitivity now reads as a substitution rule

\begin{prooftree}
\AxiomC{$\Gamma, x : A\vdash M : B$}
\AxiomC{$\Gamma \vdash N : A$}
\BinaryInfC{$[N/x]M : B$}
\end{prooftree}

and reflexivity is only a use of a variable

\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma, x:A \vdash x : A$}
\end{prooftree}

We will write this derivations as mappings on a bicartesian closed category

\[M : A_1 \times \dots \times A_n \to A.
\]

Proof-relevant logic will give rise to Type Theory and Category Theory.
* Lecture 4: Proof Reduction and Equivalence
We first saw logic from the point of view of provability. We are going
to look at the idea of logic with proofs. From the first, we got Heyting
Algebras; from the second, we are going to get bicartesian closed categories.

We going to define equivalence of proofs $M \equiv N : A$.

** Proof terms
We will need a grammar of proofs to construct proof terms.
The structural properties are now properties for this grammar.

 * Reflexivity is now the introduction of a variable.
 * Transitivity is now the substitution of a variable.
 * Weakening is now the ability to discard variables.
 * Contraction is now a replication of variables.
 * Exchange is a permutation of variables.

** Logic
Now the negative fragment of our logic can be written as

\begin{prooftree}
\RightLabel{$(\top_{I})$}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash \left\langle  \right\rangle : \top$}
\end{prooftree}

\begin{prooftree}
\RightLabel{$(\wedge-I)$}
\AxiomC{$\Gamma \vdash M : A$}
\AxiomC{$\Gamma \vdash N : B$}
\BinaryInfC{$\Gamma \vdash \left\langle M,N \right\rangle : A \wedge B$}
\end{prooftree}

\begin{prooftree}
\RightLabel{$(\wedge_{E1})$}
\AxiomC{$\Gamma \vdash M : A \wedge B$}
\UnaryInfC{$\Gamma \vdash \text{fst}(M) : A$}
\RightLabel{$(\wedge_{E2})$}
\AxiomC{$\Gamma \vdash M : A \wedge B$}
\UnaryInfC{$\Gamma \vdash \text{snd}(M) : B$}
\noLine
\BinaryInfC{}
\end{prooftree}


\begin{prooftree}
\RightLabel{$(\supset_{I})$}
\AxiomC{$\Gamma, x:A \vdash M:B$}
\UnaryInfC{$\Gamma \vdash \lambda x . M : A \supset B$}
\end{prooftree}

\begin{prooftree}
\RightLabel{$(\supset_{E})$}
\AxiomC{$\Gamma \vdash M . A \supset B$}
\AxiomC{$\Gamma \vdash N : A$}
\BinaryInfC{$\Gamma \vdash M(N) : B$}
\end{prooftree}

** Gentzen's Inversion principle
** Definitional equality
In first order logic, no one draws a distinction between propositional
equality and definitional equality.

*Definitional equality* is the least congruence closed under the following
rules
 
 * it is a equivalence relation.
 * it is compatible with the rules.

\begin{prooftree}
\AxiomC{$\Gamma \vdash M \equiv M' : A \wedge B$}
\UnaryInfC{$\Gamma \vdash \text{fst}(M) \equiv \text{fst}(M') : A$}
\end{prooftree}

Now the inversion principle can be written on proof terms.
Simplifications such as $\text{fst}\left\langle M,N \right\rangle \equiv M$ are now useful if we
interpret this as a running program with proof dynamics.

Those are called Beta rules.
The inversion principle on conjunction is now

\begin{prooftree}
\RightLabel{$(\beta\wedge_1)$}
\AxiomC{$\Gamma \vdash M : A$}
\AxiomC{$\Gamma \vdash N : B$}
\BinaryInfC{$\Gamma \vdash \text{fst}\left\langle M,N \right\rangle \equiv M : A$}
\RightLabel{$(\beta\wedge_2)$}
\AxiomC{$\Gamma \vdash M : A$}
\AxiomC{$\Gamma \vdash N : B$}
\BinaryInfC{$\Gamma \vdash \text{snd}\left\langle M,N \right\rangle \equiv N : B$}
\noLine
\BinaryInfC{}
\end{prooftree}

The inversion principle on implication is inlining

\begin{prooftree}
\RightLabel{$(\beta\supset_1)$}
\AxiomC{$\Gamma,x:A \vdash M : B$}
\AxiomC{$\Gamma \vdash N : A$}
\BinaryInfC{$\Gamma \vdash (\lambda x. M)(N) \equiv [N/x]M : B$}
\end{prooftree}

Now we can compute by calculation with closed terms written
as $M \equiv N$.

** Gentzen's Unicity Principles
Those are $\eta$ rules.

\begin{prooftree}
\RightLabel{$(\eta\top)$}
\AxiomC{$\Gamma \vdash M : \top$}
\UnaryInfC{$\Gamma \vdash M \equiv \left\langle  \right\rangle : \top$}
\end{prooftree}

\begin{prooftree}
\RightLabel{$(\eta\wedge)$}
\AxiomC{$\Gamma\vdash M: A \wedge B$}
\UnaryInfC{$M \equiv \left\langle \text{fst}(M),\text{snd}(M) \right\rangle$}
\end{prooftree}

\begin{prooftree}
\RightLabel{$(\wedge\supset)$}
\AxiomC{$\Gamma\vdash M:A \supset B$}
\UnaryInfC{$\Gamma\vdash M \equiv \lambda x. Mx : A \supset B$}
\end{prooftree}

** Propositions as types
The inversion and unicity principles will make a very strong
correspondence on categories.

\begin{tabular}{c|c|c|c}
Latticces & Propositions & Types & Categories \\
\hline
greatest & $\top$ & $1$ & final object \\
meets & $A \wedge B$ & $A \times B$ & finite products \\
exponential & $A \supset B$ & $A \to B$ & exponential \\
minimum & $\bot$ & $0$ & initial object \\
joins & $A \vee B$ & $A+B$ & coproducts
\end{tabular}

** Category
A *category* is a generalized preoder with evidence.
The difference between preorder and partial order is
related to univalence

\begin{prooftree}
\AxiomC{$A \leq B$}
\AxiomC{$B \leq A$}
\BinaryInfC{$A \equiv B$}
\end{prooftree}

where this is an instance of univalence. 

In a category we have the structure of a preorder

 1) Reflexivity, $\mathrm{id} : A \to A$.
 2) Transitivity; if $f: A \to B$ and $g : B \to C$ then
    $g \circ f : A \to C$.

Those have to satisfy some coherence conditions, which are 
the following unit laws

 * $\mathrm{id_B}\circ f = f = f \circ \mathrm{id_A}$
 * $f \circ (g \circ h) = (f\circ g)\circ h$

The equality here is interesting. We could think of this structure
representing two paths and an homotopy between two paths on a 2-cell;
some kind of transformation. We are going to talk of a deformation
given by an associator

\[
\alpha : f \circ (g \circ h) \to (f \circ g) \circ h.
\]

And those notions of evidence (which act as natural transformations) need
also a notion of equivalence and a higher dimensional map between them. But 
this process could be repeated to infinity!

We are going to express the relation of types and terms in categorical terms.

** Terminal object
Definition of final object

\begin{prooftree}
\AxiomC{$$}
\UnaryInfC{$\left\langle\right\rangle : A \to 1$}
\AxiomC{$M : A \to 1$}
\RightLabel{$(\eta{\top})$}
\UnaryInfC{$M = \left\langle  \right\rangle : 1$}
\noLine
\BinaryInfC{}
\end{prooftree}

this was, in our old notation, $A \vdash \left\langle  \right\rangle : 1 = \top$.

** Product objects
There are maps

 1) $\mathrm{fst} : A \times B \to A$
 2) $\mathrm{snd} : A \times B \to A$

satisfying

\[\begin{tikzcd}[column sep=tiny]
& D \ar[bend left]{ddr}{M}\ar[swap,bend right]{ddl}{N}\dar[dashed]{\exists!} & \\
& A \times B \drar[swap]{\mathrm{fst}} \dlar{\mathrm{snd}} & \\
A && B
\end{tikzcd}\]

Pairing is the function taking two functions and returning
the function to the product

\begin{prooftree}
\AxiomC{$M : D \to A$}
\AxiomC{$N : D \to B$}
\BinaryInfC{$\left\langle M,N \right\rangle : D \to A \times B$}
\end{prooftree}

algebraically,

 * $\mathrm{fst}\circ \left\langle M,N \right\rangle = M : D \to A$
 * $\mathrm{snd}\circ \left\langle M,N \right\rangle = N : D \to B$

and there is a uniqueness condition; given

\begin{prooftree}
\RightLabel{$(\eta \times)$}
\AxiomC{$P : D \to A \times B$}
\AxiomC{$\mathrm{fst} \circ P = M$}
\AxiomC{$\mathrm{snd} \circ P = N$}
\TrinaryInfC{$P = \left\langle M,N \right\rangle : D \to A \times B$}
\end{prooftree}

the uniqueness can be seen as the existence of homotopy between
any two functions making the product diagram commute.

In particular, $\left\langle  \mathrm{fst}\circ P, \mathrm{snd} \circ P  \right\rangle = P$. Or we can say that $\left\langle \mathrm{fst}, \mathrm{snd} \right\rangle = \mathrm{id}$
or $\left\langle M,N \right\rangle \circ P = \left\langle M\circ P,N \circ P \right\rangle$.

Lawvere and Lambek first saw those connections on the 70s.
** Exponentials
The exponential $B^A$, gives the application map with the universal
diagram

\[\begin{tikzcd}
C \dar[dashed,swap]{\exists! \lambda(h)} & 
C \times A \ar{dr}{h}\dar[dashed,swap]{\lambda(h) \times id_A} & \\
B^{A} & B^{A} \times A \rar[swap]{app} & B \\
\end{tikzcd}\]

If we write that on syntax, that is equal to

 * $app(\lambda(h) \times \mathrm{id}) = ap \circ \left\langle \lambda(h) \circ \mathrm{fst}, \mathrm{snd} \right\rangle = h$.
 * if there is any $g$ such that $ap \circ (g \times \mathrm{id}) = h$, then $g = \lambda(h)$.

We get the $\eta\text{-rule}$ of

\[
g = \lambda(\mathrm{ap} \circ (g \times \mathrm{id}))
  = \lambda(\mathrm{ap} \circ \left\langle g \circ \mathrm{fst}, \mathrm{snd} \right\rangle).
\]

The essence of all this is

\begin{prooftree}
\AxiomC{$\Gamma, x:A \vdash h : B$}
\UnaryInfC{$\Gamma \vdash \lambda x. h: B^A$}
\end{prooftree}

** DeBruijn indices
If we write contexts as $A_{n-1}\times \dots \times A_{1}$, and we refer to the
variables using $\mathrm{snd}(\mathrm{fst}(\mathrm{fst}\dots))$.
* Lecture 5: Universal properties
In the previous weeks we talked about

 * logic via provability and truth.
 * the entailment relation.
 * an order theoretic interpretation.
 * a logic for proofs with proof terms.
 * a notion of equality for proofs.

** Gentzen's inversion principle
Represented on the $\beta$ principles, rules such as

 * $\mathtt{fst} \left\langle M,N \right\rangle \equiv M$
 * $\mathtt{snd} \left\langle M,N \right\rangle \equiv N$
 * $(\lambda x. M)(N) \equiv [N/x]M$
 * $\mathtt{case}(\mathtt{inl}(M), x.P, y.Q) \equiv [M/x]P$
 * $\mathtt{case}(\mathtt{inr}(M), x.P, y.Q) \equiv [M/y]Q$

they act as rules for proof simplification and can be interpreted as
a dynamics for proofs. Proofs are programs.

** Gentzen's unicity principles
Represented on $\eta$ principles.

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : \top$}
\UnaryInfC{$\Gamma \vdash M \equiv \langle\rangle : \top$}
\end{prooftree}

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : A \wedge B$}
\UnaryInfC{$\Gamma \vdash M \equiv \left\langle \mathtt{fst}(M),\mathtt{snd}(M) \right\rangle : A \wedge B$}
\end{prooftree}

there is another way of saying this

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : A \wedge B$}
\AxiomC{$\Gamma \vdash \mathtt{fst}(M) \equiv P : A$}
\AxiomC{$\Gamma \vdash \mathtt{snd}(M) \equiv Q : B$}
\TrinaryInfC{$\Gamma \vdash M \equiv \left\langle P,Q \right\rangle : A \wedge B$}
\end{prooftree}

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : A \supset B$}
\UnaryInfC{$\Gamma \vdash M \equiv \lambda x. M(x) : A \supset B$}
\end{prooftree}

** Categorical interpretation
A derivation

\[
x_1:A_1,\dots,x_n:A_n \vdash M : A
\]

is interpreted as a morphism

\[
M : A_1 \times \dots \times A_n \to A\]
\[M \equiv N : A_1 \times \dots \times A_n \to A
\]

The product diagram relates

 * the existence with the introduction.
 * the uniqueness with the $\eta$ rules.
 * the commutativity with the $\beta$ rules.

** Unicity principle for the disjunction [40:00]
It is more difficult to see how the disjunction property should be
written. An inspiration is the notion of Shannon expansion: the type
of booleans can be written as $\top \vee \top$; then $\mathtt{case}$ acts as a binary decision 
diagram. The Shannon expansion is a substitution using booleans where
 
 * $\mathtt{inl} \left\langle  \right\rangle \equiv true$
 * $\mathtt{inl} \left\langle  \right\rangle \equiv false$

then

\[
[M/x]P \equiv \text{ if } M \text{ then } [true/x]P \text{ else } [false/x]P.
\]

and, in particular,

\[
P \equiv \text{ if } x \text{ then } [true/x]P \text{ else } [false/x]P.
\]

The eta rule for disjunction is then

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : A \vee B$}
\AxiomC{$\Gamma, z:A \vee B \vdash P : C$}
\BinaryInfC{$\Gamma \vdash [M/z]P \equiv \mathrm{case}(M; x : [\mathtt{inl}(x)/z]P; y : [\mathtt{inr}(y)/z]P) : C$}
\end{prooftree}

like a generalized Shannon expansion. As an special case, we
get that $M \equiv \mathtt{case}(M, x . \mathtt{inl}(x), y . \mathtt{inr}(y))$.

** Remark
We could have defined the relationship on variables $x \equiv \left\langle \mathtt{fst}(x), \mathtt{snd}(x) \right\rangle$, but
to derive the general rule from there, we would have needed another property
to get a correct substitution rule.

** Coproduct
We write the coproduct as $A + B$, and its diagram as

\[\begin{tikzcd}[column sep=tiny]
& C  & \\
& A+B  \uar[dashed]{\exists! \left\{ P,Q \right\}}  & \\
A\ar[bend left]{uur}{P}       \urar[swap]{\mathtt{inl}} &&
B\ar[swap,bend right]{uul}{Q} \ular{\mathtt{inr}}
\end{tikzcd}\]

where

\[
\left\{ P,Q \right\} \equiv \mathtt{case} ( - , x.P, y.Q) 
\]

And the unicity simply says that

\begin{prooftree}
\AxiomC{$\Gamma, x:A \vdash [ \mathtt{inl}(x)/z ]M \equiv P : C$}
\AxiomC{$\Gamma, y:B \vdash [ \mathtt{inr}(y)/z ]M \equiv Q : C$}
\BinaryInfC{$\Gamma, z : A+B \vdash M \equiv \mathtt{case}(z,x:P,y:Q) : C$}
\end{prooftree}

This is an induction principle. We can caracterize the behaviour of $M$ simply
by giving its behaviour on the $\mathtt{inl}$ and the $\mathtt{inr}$.
** Beta/eta rules
The beta rules are analytic judgements. Self-evident.
The eta rules are synthetic judgements. They require proof.

The beta rules correspond to definitional equality and the 
eta rules correspond to propositional equality; it will be
expressed typically by a type. The definitional equality, on
the other hand, is simply a judgement and it is also called
a judgmental equality.
* Lecture 6: Dependency, families of types
So far, we have seen a propositions/types correspondence.
We will add a type of natural numbers, and look for its correspondence
in intuitionistic logic.

** GÃ¶del's T
We will call GÃ¶del's T to the system we have developed so far plus
a natural numbers type. This is not exactly GÃ¶del's T in the literature,
where it is defined only with function types.

\begin{prooftree}
\RightLabel{(Nat$_{I-0}$)}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash 0 : Nat$}
\RightLabel{(Nat$_{I-S}$)}
\AxiomC{$\Gamma \vdash M : Nat$}
\UnaryInfC{$\Gamma \vdash s(M) : Nat$}
\noLine
\BinaryInfC{}
\end{prooftree}

The elimination form is just definition by recursion

\begin{prooftree}
\RightLabel{(Nat$_{E}$)}
\AxiomC{$\Gamma \vdash M : Nat$}
\AxiomC{$\Gamma \vdash P : A$}
\AxiomC{$\Gamma, x:A \vdash Q:A$}
\TrinaryInfC{$\Gamma \vdash \mathtt{rec}(P,x.Q)(M) : A$}
\end{prooftree}

We need now two beta rules to comply with the inversion principle.

 * $\mathtt{rec}(P,Q)(0) \equiv P$
 * $\mathtt{rec}(P,Q)(s(M)) \equiv [ \mathrm{rec}(P,Q)(M)/x ]Q$

so, if $\overline{n} = s(\dots s(0)\dots)$, $\mathtt{rec}(P,Q)(\overline{n}) \equiv Q(Q(\dots (Q(P))\dots)$.

There is also a eta rule, that was not considered by GÃ¶del at the moment.
Suppose an $M$ acting the same way on the $0$ and the $s$, then it is the
recursor.

\begin{prooftree}
\AxiomC{$\Gamma,z : Nat \vdash M : A$}
\AxiomC{$\Gamma \vdash [0/z] M \equiv P:A$}
\AxiomC{$\Gamma, z:Nat \vdash [ S(z)/z ]M \equiv [M/x]Q$}
\TrinaryInfC{$\Gamma,z:Nat \vdash M \equiv \mathtt{rec}(P,Q)(z)$}
\end{prooftree}

*** Special case on the recursor
Plugging naturals on the recursor

$z : Nat \vdash \mathtt{rec}(0,y.s(y))(z) \equiv z : Nat$

*** Commuting conversion

$\Gamma, z:Nat \vdash [ \mathtt{rec}(0,y.s(y))(z)/z  ]M \equiv \mathtt{rec}([0/z]M, y.[s(y)/z]M)(z)$

** Natural numbers object in a category
The natural numbers object is the universal object in the following
diagram

\[\begin{tikzcd}[column sep=huge]
1 \rar{0}\drar[swap]{P} &
\mathbb{N} \dar[dashed]{\exists! \mathtt{rec}(P,Q)} &
\mathbb{N} \rar{s}\dar[dashed]{\exists! \mathtt{rec}(P,Q)} &
\mathbb{N} \dar[dashed]{\exists! \mathtt{rec}(P,Q)} \\
&
A &
A \rar[swap]{Q}&
A
\end{tikzcd}\]

** Reorging the NNO into an initial algebra
This is equivalent to this universality property

\[\begin{tikzcd}[column sep=60pt]
1+\mathbb{N} \dar[swap]{\left\{ 0,s \right\}} \rar[dashed]{ id + \mathtt{rec}(P,Q) } & 
1+A \dar{\left\{ P,Q \right\}} \\
\mathbb{N} \rar[dashed]{\mathtt{rec}(P,Q)}  & 
A
\end{tikzcd}\]

where $f+g : A+B \to A'+B'$ is defined componentwise on the coproduct.

** Initial algebras
This is an instance of a more general phenomenon, where a functor $F$ satisfies
the diagram with the initial object $I$.

\[\begin{tikzcd}
F(I)\rar{F(!)} \dar[swap]{i} & F(A) \dar{f} \\
I\rar{(!)} & A
\end{tikzcd}\]

This is called an *initial algebra*.

** Defining addition
We can define addition on the second argument

$\mathtt{plus} := \lambda x. \lambda y. \mathtt{rec}(x;z.s(z))(y)$

and we can check that $\mathtt{plus}\ \overline{m}\ \overline{n} \equiv \overline{m+n}$. But we also can
define addition on the first $\mathtt{q}:= \lambda x.\lambda y. \mathtt{p}\ y\ x$, and this also
implements addition: $\mathtt{q}\ \overline{m}\ \overline{n} \equiv \overline{m+n}$.

Be we cannot prove

\[
x:Nat, y:Nat \vdash \mathtt{p}\ x\ y \equiv \mathtt{q}\ x\ y  \equiv \mathtt{p}\ y\ x
\]

as these are NOT definitionally equal! It can be proved that it is
not provable using only beta rules. This would require a proof by
induction: to show something for all the numerals is the same thing
as to show it for any numeral variables.

** Extensional and intensional equality
Those are *extensionally* equal, but they are not intensionally equal
(definitional equality). They represent a different algorithm. In the
*sense of Frege*, they have the same reference, but not the same sense.
They have the same IO but different algorithms.

 * Extensional equality is analytic, it does not require proof.
 * Intensional equality is synthetic, does requires proof.

Extensional equality on $(\mathbb{N}\to \mathbb{N})\to(\mathbb{N}\to \mathbb{N})$ has a high quantifier
complexity. A bunch of nested forall and exist.

** Extensional equality
Intensional equality is an inductive defined judgment, whereas
Extensional equality is a proposition such as

\[ \mathtt{p}\ x\ y =_{Nat} \mathtt{q}\ x\ y
\]

that is an atomic proposition. By the propositions as types
principle, extensional equality is a family of types.

\[
x: Nat, y:Nat \vdash x = y \text{ type}
\]

sometimes $x=y$ is written as $Id_{Nat}(x,y)$. It is a propositional
function or a binary relation.

This family can be instantiated by substitution

\[
Id_{Nat}(M,N) \text{ type}
\]

whenever $M,N:Nat$.

** Example of extensional equality
We can define the finite sequence of naturals of length $x:Nat$

\[
x : Nat \vdash Seq(x) \text{ type.}
\]

In this case, $Seq(p\ \overline{m}\ \overline{n}) \equiv Seq(q\ \overline{m}\ \overline{n})$ because of the fact that
$p\ \overline{m}\ \overline{n} \equiv q\ \overline{m}\ \overline{n}$. But

\[
x:Nat, y:Nat \vdash Seq(p\ x\ y) \not\equiv Seq(q\ x\ y)
\]

will not be definitionally equal. But they are isomorphic! In some
sense, they should be equivalent. $A \simeq B$ should mean that for some
$f,g$, we should get

\[\begin{aligned}
\alpha :&\quad g \circ f = \mathrm{id} \\
\beta :&\quad f \circ g = \mathrm{id}
\end{aligned}\]

but again, we are we meaning here by equality? In this case we are
talking about propositional equality. There should be transformations
$\alpha,\beta$ between the compositions and the identities.

** Univalence axiom
In some sense, we expect them to be equal. Univalence says that $A=B \iff A \simeq B$.
There will be an equivalence between those two types.
** Setup for dependent types
Context/closed types. We have judgements
 
 * $\Gamma \text{ ctx}$
 * $\Gamma \equiv \Gamma'$

Open types/families

 * $\Gamma \vdash A \text{ type}$
 * $\Gamma : A \equiv A'$

Elements of types

 * $\Gamma \vdash M : A$
 * $\Gamma \vdash M \equiv M' : A$

We will have a notion of empty context and the notion of adding anything
to a context

\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\cdot \text{ ctx}$}
\AxiomC{$\Gamma \text{ ctx}$}
\AxiomC{$\Gamma \vdash A \text{ type}$}
\BinaryInfC{$\Gamma, x:A \text{ ctx}$}
\noLine
\BinaryInfC{}
\end{prooftree}

and the equality

\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\cdot \equiv \cdot$}
\AxiomC{$\Gamma \equiv \Gamma'$}
\AxiomC{$\Gamma \vdash A \equiv A'$}
\BinaryInfC{$\Gamma, x:A \equiv \Gamma, x:A'$}
\noLine
\BinaryInfC{}
\end{prooftree}

we can take variables

\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma,x:A,\Delta \vdash x :A $}
\end{prooftree}

here it is necessary a weakening rule

\begin{prooftree}
\AxiomC{$\Gamma,\Delta \vdash J$}
\AxiomC{$\Gamma \vdash A \text{ type}$}
\BinaryInfC{$\Gamma, x:A, \Delta \vdash J$}
\end{prooftree}

and a substitution

\begin{prooftree}
\RightLabel{(substitution/transitivity)}
\AxiomC{$\Gamma, x:A, \Delta \vdash J$}
\AxiomC{$\Gamma \vdash M:A$}
\BinaryInfC{$\Gamma [M/x]\Delta \vdash [M/x]J$}
\end{prooftree}

and the principle of functionality

\begin{prooftree}
\AxiomC{$\Gamma, x:A, \Delta \vdash N:B$}
\AxiomC{$\Gamma\vdash M\equiv M' :A$}
\BinaryInfC{$\Gamma [M/x] \Delta \vdash [M/x]N \equiv [M'/x]N : [M/x]B$}
\end{prooftree}

another simpler rule is

\begin{prooftree}
\AxiomC{$\Gamma \vdash M:A$}
\AxiomC{$\Gamma \vdash A \equiv A'$}
\BinaryInfC{$\Gamma \vdash M:A'$}
\end{prooftree}

and similarly

\begin{prooftree}
\AxiomC{$\Gamma \vdash M \equiv M':A$}
\AxiomC{$\Gamma \vdash A \equiv A'$}
\BinaryInfC{$\Gamma \vdash M\equiv M':A'$}
\end{prooftree}

All this is written on the section 2 of the appendix of HoTT.

*** Exercise
Consider exchange and contraction
** Formation rules
The identity type is constructed as

\begin{prooftree}
\RightLabel{(Id-F)}
\AxiomC{$\Gamma \vdash A \text{ type}$}
\AxiomC{$\Gamma \vdash M:A$}
\AxiomC{$\Gamma \vdash N:A$}
\TrinaryInfC{$\Gamma \vdash Id_A(M,N) \text{ type}$}
\end{prooftree}

iterated identity types can be defined $Id_{Id_A(M,N)}$ to any dimension.
The introduction rule should be

\begin{prooftree}
\RightLabel{(Id-I)}
\AxiomC{$\Gamma \vdash M:A$}
\UnaryInfC{$\Gamma \vdash \mathrm{refl}(M) : Id_A(M,M)$}
\end{prooftree}

being a witness of the fact that $M$ is equal to itself.
* Lecture 7: Dependent Types
** Last week
The basic judgements are

 1) $\Gamma \text{ ctx}$
 2) $\Gamma \equiv \Gamma'$
 3) $\Gamma \vdash A \text{ type}$
 4) $\Gamma \vdash A \equiv A'$
 5) $\Gamma \vdash M:A$
 6) $\Gamma \vdash M \equiv M' :A$

and they follow structural properties. For example, typing respect definitional
equivalence

\begin{prooftree}
\AxiomC{$\Gamma \vdash M:A$}
\AxiomC{$\Gamma \vdash A \equiv A'$}
\BinaryInfC{$\Gamma \vdash M : A'$}
\end{prooftree}

We left open the exact formulation.

*** Example
An example of dependent type is $x : Nat \vdash Seq(x) \text{ text}$.

\begin{prooftree}
\AxiomC{$M \equiv M' : Nat$}
\UnaryInfC{$Seq(M) \equiv Seq(M')$}
\end{prooftree}

But we do not get $x,y : Nat \not\vdash Seq(x+y) \equiv Seq(y+x)$. The
reason is that $x + y \not\equiv y + x$, they are only intensionally equivalent.
To apply $\eta$ you need to establish an invariant about a candidate $M$,
and the $\eta$ rule would not be enough to write a proof of induction of
that fact. We do not want an induction eta-rule.

** Proof-relevance
An element $P : Id_A(M,N)$ can be seen as

 1) a proof that $M$ is $N$.
 2) an identification of $M$ with $N$.
 3) a path from $M$ to $N$.

This $x =_A y$ is called propositional equality.

** Generalization to dependent types
We will review the initial structure of types to generalize the
propositional negative connectives to their dependent forms.
For example, $A \times B$ will generalize to a sigma type $\sum_{x:A}B_x$;
and $A \supset B$ generalizes to $\prod_{x:A}B_{x}$.

\[
\prod_{x:Nat} \sum_{y:Nat} Id_{Nat}(y, \mathtt{succ}(x))
\]

They will represent logical conectives as

\[
\forall x:Nat. \exists y:Nat.\quad y = \mathtt{succ}(x).
\]

** Pi Types
Formation rules

\begin{prooftree}
\RightLabel{($\pi$-F)}
\AxiomC{$\Gamma \vdash A \text{ type}$}
\AxiomC{$\Gamma, x : A \vdash B_x \text{ type}$}
\BinaryInfC{$\Gamma \vdash \prod_{x:A}B_{x} \text{ type}$}
\end{prooftree}

introductory rules

\begin{prooftree}
\RightLabel{($\pi$-I)}
\AxiomC{$\Gamma, x:A \vdash M_{x} : B_{x}$}
\UnaryInfC{$\Gamma \vdash \lambda x. M_x : \prod_{x:A}B_{x}$}
\end{prooftree}

elimination rules

\begin{prooftree}
\RightLabel{($\pi$-E)}
\AxiomC{$\Gamma \vdash M : \prod_{x:A}B_x$}
\AxiomC{$\Gamma \vdash N:A$}
\BinaryInfC{$\Gamma \vdash MN : [N/x]B$}
\end{prooftree}

There is a beta-rule

\[
(\lambda x.M)N \equiv [N/x]M
\]

and an eta-rule

\[
(\lambda x.M x)\equiv M.
\]
** Particular case
$A \supset B$ is a particular case of a pi-type where $B$ does
not depends on $A$.

** Sigma type
*** Formation

\begin{prooftree}
\AxiomC{$\Gamma \vdash A \text{ type}$}
\AxiomC{$\Gamma, x:A \vdash B_{x} \text{ type}$}
\BinaryInfC{$\Gamma \vdash \sum_{x:A}B_x \text{ type}$}
\end{prooftree}

*** Introduction
This is constructive existence, you are required to show evidence
of a particular case where it does hold

\begin{prooftree}
\AxiomC{$\Gamma \vdash M :A $}
\AxiomC{$\Gamma \vdash N : [M/x]B$}
\BinaryInfC{$\Gamma \vdash \left\langle M,N \right\rangle : \sum_{x:A} B_x$}
\end{prooftree}

*** Particular case
The product of types is a particular case where $B_x$ is
independent from $x:A$.

*** Elimination
Will not be the same as in the HoTT book.

\begin{prooftree}
\RightLabel{($\Sigma_{E_1}$)}
\AxiomC{$\Gamma \vdash M : \sum_{x:A} B_x$}
\UnaryInfC{$\Gamma \vdash \mathtt{fst}(M) : A$}
\RightLabel{($\Sigma_{E_2}$)}
\AxiomC{$\Gamma \vdash M : \sum_{x:A} B_x$}
\UnaryInfC{$\Gamma \vdash \mathtt{snd}(M) : [ \mathtt{fst}(M)/x]B_x$}
\noLine
\BinaryInfC{}
\end{prooftree}

*** Beta/eta rules
Beta rules

 * $\mathtt{fst}\left\langle M,N \right\rangle \equiv N$,
 * $\mathtt{snd}\left\langle M,N \right\rangle \equiv N$

and an eta-rule

 * $\left\langle \mathtt{fst}(M), \mathtt{snd}(M) \right\rangle \equiv M$.
 
** Constructive logic
Can be seen as a refinment of classical logic, not as anything opposite
to it.
** Positive fragment
In the positive fragment, we have $(0,A+B,Nat,\dots)$. But are not
going to change the types. Issue: the positive elims reach into
arbitrary types.

For example, the elim of $+$ was

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : A + B$}
\AxiomC{$\Gamma,x:A \vdash N:C$}
\AxiomC{$\Gamma, y:B \vdash P:C$}
\TrinaryInfC{$\Gamma \vdash \mathtt{case}(M,x.N,y.P) : C$}
\end{prooftree}

but here there is no dependency. $C$ captures the join point of two
branches; or proof by cases.

*** Example: induction
Let $2 := 1 + 1$, $tt := \mathtt{inl}\langle\rangle$ and $ff := \mathtt{inr}\langle\rangle$. We define

\[ \mathtt{if}(M,N,P) := \mathtt{case}(M,-.N,-.P)
\]

and we want to prove that every element of $2$ is one of those

\[
\prod_{x:2} \left( Id_2(x, \mathtt{tt}) + Id_2(x, \mathtt{ff}) \right).
\]

We have to prove both

 * $Id_2(\mathtt{tt}, \mathtt{tt}) + Id_2(\mathtt{tt}, \mathtt{ff})$
 * $Id_2(\mathtt{ff}, \mathtt{tt}) + Id_2(\mathtt{ff}, \mathtt{ff})$

So we use

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : A + B$}
\AxiomC{$\Gamma, z:A+B \vdash C_{z}$ type}
\AxiomC{$\Gamma, x:A \vdash N: [\mathtt{inl}(x)/z] C$}
\noLine
\UnaryInfC{$\Gamma, y:B \vdash P: [\mathtt{inr}(y)/z] C$}
\TrinaryInfC{$\Gamma \vdash \mathtt{case} [z.C] (M;x.N;y.P) : [M/z]C$}
\end{prooftree}

where $[z.C]$ is called the *motive* (term by Connor McBride). In this
particular case

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : 2$}
\AxiomC{$\Gamma, z:2 \vdash C_{z}$ type}
\AxiomC{$\Gamma\vdash N: [\mathtt{tt}/z] C$}
\noLine
\UnaryInfC{$\Gamma\vdash P: [\mathtt{ff}/z] C$}
\TrinaryInfC{$\Gamma \vdash \mathtt{if}(M;N;P) : [M/z]C$}
\end{prooftree}

This is a rule of induction.

*** Example
We have the expression

$\mathtt{if}(M,17, \mathtt{tt}) : \mathtt{if} (M,Nat,2)$

but, it is a well-typed expression? not yet. We cannot type
those as types.

** Induction on naturals
\begin{prooftree}
\AxiomC{$\Gamma \vdash M : Nat$}
\AxiomC{$\Gamma, z:Nat \vdash C \text{ type}$} 
\AxiomC{$\Gamma \vdash N : [0/z]C$}
\noLine
\UnaryInfC{$\Gamma,x:Nat, y:[x/z]C \vdash P:[s(x)/z]C$}
\TrinaryInfC{$\Gamma \vdash \mathtt{rec}[z.C](M,N;x,y.P) : [M/z]C$}
\end{prooftree}

with the two beta rules

 * $\mathtt{rec}[z.C](0,N; x,y.P) \equiv N$
 * $\mathtt{rec}[z.C](s(M), N; x,y.P) \equiv [M, \mathtt{rec}[z.C](M,N;x,y.P)/x,y]P$

It has an eta rule which is not useful.

*** Exercise

$\prod_{x:Nat} \left(Id(s(x),0) \to \bot\right)$

we will use

\[
\lambda x. \mathtt{rec}[-](x; -,-)
\]

*** Hard exercise
We cannot solve this yet

$\prod_{x,y : Nat} (Id_{Nat}(sx,sy) \to Id_{Nat}(x,y))$
** The other form of product types, sigma variant
Idea: elimination as pattern-matching.

\begin{prooftree}
\AxiomC{$\Gamma \vdash M : \Sigma_{x:A}B_x$}
\AxiomC{$\Gamma, z : \Sigma_{x:A}B_x \vdash C \text{ type}$}
\AxiomC{$\Gamma, x:A, y:B \vdash P : [\langle x,y \rangle/z]C$}
\TrinaryInfC{$\Gamma \vdash \mathtt{split}[z.C](M;x,y.P) : [M/z]C$}
\end{prooftree}

the beta rule is

 * $\mathtt{split}[z.C](\left\langle M_1,M_2 \right\rangle; x,y.P) \equiv [M_1,M_2/x,y]P$

and the eta rule is similar to previous $\eta$ rules. Anything like split is split.

*** Exercise
Define =split= from fst,snd.
Define =fst=, =snd= from split. (Not yet)
* Lecture 8: Identity types
** Polarity
Negative and positive fragments. The difference here is
if the type is based on the elimination or the introduction
rule; the other part of the rule is determined by this first
rule. In category theory, it corresponds to the universal
property mapping /in/ or /out/ the definition of the type.

\begin{tabular}{c|cc}
            & negative    & positive     \\
\hline
type theory & elimination & introduction \\
category theory & UP mapping in & UP mapping out
\end{tabular}

For example, $A\times B$ is /negative/. We write the elimination rule:
given a product, we have =fst= and =snd=. The introduction rule is
a pair, needing an $A$ and a $B$.
** Last week
Dependent formulations of 

 1) negatives $\Pi,\Sigma$.
 2) positives, the type does not change, but the elimination forms do;
    they become induction principles

Elim for the booleans is an example of branching. Today

 * identity types
 * universes
 * ITT. Limitations and peculiarities

** Identity types
They have this rule of formation

\begin{prooftree}
\RightLabel{(Id-F)}
\AxiomC{$\Gamma \vdash A \text{ type}$}
\AxiomC{$\Gamma \vdash M : A$}
\AxiomC{$\Gamma \vdash N : A$}
\TrinaryInfC{$\Gamma \vdash Id_A(M,N) \text{ type}$}
\end{prooftree}

if we read this type propositionally, this is the type of proofs of
equality between $M$ and $N$. As a notation we use $M =_A N$.

\begin{prooftree}
\RightLabel{(Id-T)}
\AxiomC{$\Gamma \vdash M : A$}
\UnaryInfC{$\Gamma \vdash \mathtt{refl}_A(M) : Id_A(M,M)$}
\end{prooftree}

In ITT, this would be the only intro rule. We can think of $Id$ as an
inductively generated family of types. 

** Elimination rule for identity types
The elimination rule would then work as

\begin{prooftree}
\RightLabel{(Id-E)}
\AxiomC{$\Gamma \vdash P: Id_{A}(M,N)$}
\AxiomC{$\Gamma, x:A, y:A, z:Id_A(x,y) \vdash C \text{ type}$}
\AxiomC{$\Gamma, x:A \vdash Q: [x,x,\mathtt{refl}(x)/x,y,z]C$}
\TrinaryInfC{$\Gamma \vdash J[x,y,z.C](P;x.Q) : [M,N,P/x,y,z]C$}
\end{prooftree}

This principle is called *path induction*, where a path is an element
of the identity type. The beta rule is then

 * $J[x,y,z.C]( \mathtt{refl}(M), x.Q) \equiv [M/x]Q : [M,M, \mathtt{refl}(M)/x,y,z]C$

This $J$ is the computational content of the proofs by path induction.
** Equivalence relation of identity
The identity type should be an equivalence relation

 1) it is reflexive by definition, $Id_A(M,M) \text{ true}$.
 2) it is symmetric showing that there is a function

    \[ \mathtt{sym}_A : \prod_{x,y:A}Id_A(x,y) \to Id_A(y,x)
    \]

 3) it is transitive with

    \[ \mathtt{trans}_A:
    \prod_{x,y,z:A} Id_A(x,y) \to Id_A(y,z) \to Id_A(x,z)
    \]

To define symmetry, we will take

\[ \mathtt{sym}_A :=
\lambda x,y:A.\quad \lambda z:Id_A(x,y).\quad
J[x,y, - : Id_A(y,x)}](z;x. \mathtt{refl}_A(x))
\]

Note that $\mathtt{sym}(M)(M)(\mathtt{refl}(M)) \equiv \mathtt{refl}(M)$ due to the beta rule for $J$.

To define transitivity 

\[ \mathtt{trans}_A :=
\lambda m,n,p. \ \lambda u{:}Id_A(m,n).\ \lambda v{:} Id_A(n,p).\  
(J[x,y, -:Id_A(y,p) \to Id(x,p) ](u; x.\lambda w.w))(v)
\]

# It would be better to stop using lambdas for the parameters and
# write the arguments as arguments.

Note that, in particular, $\mathtt{trans}(M)(M)(P)(\mathtt{refl_A(M)})(Q) \equiv Q$.

*** Exercise
Find two other proofs, not definitionally equivalent, of transitivity.
Hint: double induction.
** Simple functionality
Suposse $x:A\vdash F:B$ where $A,B$ are types. We have $F\colon A \to B$.
We would like to have a way to prove that maps preserve equality

\[
x,y{:}A, u{:}Id_A(x,y) \vdash Id_B(Fx,Fy)
\]

We will define $\mathtt{ap}\ F\ u$, also called $F(|u|)$; the functorial action

\[ \mathtt{ap}\ F\ u = 
J[x,y, -:Id_B(Fx,Fy)](u, x. \mathtt{refl}_B(F\ x))
\]

** Transportation property
Suposse $x:A \vdash B \text{ type}$, two pictures are useful

 1) Assigning $a{:}A \mapsto B[a]$ should be functorial.
 2) $\int_{A} B$ should have a display map with fibers sending elements
    on $B[a]$ to $a$.

In some sense, $a = a'$ must imply $B[a] \simeq B[a']$. Transportation could
be thought as functionality for families.

We would want to have 

\[
m,m':A, u:Id_A(m,m'), v : [m/x]B \vdash \mathtt{tr}[x.B](u)(v) : [m'/x]B
\]

the notation for $\mathtt{tr}[x.B](u)(v)$ is $u_{\ast}(v)$.

# Diagram of the lifting property [1:19:50]

This should be defined using path induction

\[ \mathtt{tr}[x.B](u)(v) :=
J\Big[x,y, -:[x/z]B \to [y/z]B\Big](u; z. \lambda w.w)(v)
\]

** Exercise
Find a map 

\[
x,y{:}Nat \vdash  -{:} Seq(x+y) \to Seq(y+x)
\]

To do this we need

 1) to find a path $x,y{:} Nat \vdash -{:}x+y =_{Nat} y+x$.
 2) transport along that path.
* Exercises
** Homework 1: Heyting algebra and IPL [5/6]
*** DONE Task 1
#+begin_statement
Show that $A \wedge (B \vee C) \leq (A \wedge B) \vee (A \wedge C)$ in any Heyting algebra.
Hint: use the Yoneda Lemma.
#+end_statement

The Yoneda Lemma in this setting says that the statement is equivalent
to say that, for all $D$, if $(A \wedge B) \vee (A \wedge C) \leq D$, then $A \wedge (B \vee C) \leq D$.
In this case we have

 * $A \wedge B \leq D$
 * $A \wedge C \leq D$

and crucially using the definition of exponential

 * $B \wedge C \leq B,C \leq A \supset D$.

*** DONE Task 2
#+begin_statement
Show that in any Heyting algebra, $A \supset \bot$ is one of the largest elements
inconsistent with $A$, and is equivalent to any largest inconsistent one.
#+end_statement

By definition, $A \wedge (A \supset \bot) \leq \bot$, and for any other element $C$ such that
$A \wedge C \leq \bot$, $C \leq (A \supset \bot)$. Any other largest inconsistent element should
satisfy $(A \supset \bot) \leq C$.

*** DONE Task 3
#+begin_statement
Show that, in any Boolean algebra (complemented distributive lattice),
$\overline{A} \vee B$ is a valid implementation of $A \supset B$. That is, it satisfies all
properties of $A \supset B$.
#+end_statement

We know that

\[
A \wedge (\overline{A}\vee B) \leq 
(A \wedge \overline{A}) \vee (A \wedge B) \leq
(A \wedge B) \leq B
\]

and if $A \wedge C \leq B$, then

\[
C \leq
C \wedge (A \vee \overline{A}) \leq
B \vee (C \wedge \overline{A}) \leq \overline{A} \vee B.
\]
*** TODO Task 4
#+begin_statement
Show that IPL is transitive, which is to say ...
#+end_statement

*** DONE Task 5
#+begin_statement
Show that for any Heyting algebra and any evaluation function on
atoms, if $\Gamma \vdash P$ true then $\Gamma^+\leq P^{\ast}$. You only have to consider the
cases in which the last rule applied is $(\supset I)$ or $(\supset E)$.
#+end_statement

  * In the first case, $(\supset I)$, we know that $\Gamma, A \vdash B$. By induction,
    we know that $\Gamma^{+} \wedge A^{\ast} \leq B^{\ast}$, and then $\Gamma^{ +} \leq (A^{\ast} \supset B^{\ast})$.
  * In the second case, we know by induction that $\Gamma^{ +} \leq A^{\ast} \supset B^{\ast}$ and
    $\Gamma^{+} \leq A^{\ast}$, so $\Gamma^{ +} \leq A^{\ast} \wedge (A^{\ast} \supset B^{\ast}) \leq B^{\ast}$.

*** DONE Task 6
#+begin_statement
Consider the Lindembaum algebra of IPL where the elements are all
propositions in IPL (with the translation $(-)^{\ast}$ being the identity function) 
and the relationship $\leq$ is defined by provability in IPL. That is, $A\leq B$ 
iff $A \text{ true} \vdash B\text{ true}$. Show that this is a Heyting algebra. You only have to
prove the transitivity. You may assume weakening and exchange of IPL,
or cite previous tasks as lemmas.
#+end_statement

If $A \leq B$ and $B \leq C$, we know that, by weakening, $A \text{ true},B \text{ true} \vdash C \text{ true}$.
We now can apply transitivity to $A \text{ true} \vdash B \text{ true}$ and the previous formula
to obtain $A \text{ true} \vdash C \text{ true}$.
** Homework 2: Kindom of Kittens [0/7]
*** TODO Task 1
#+begin_statement
Weite down a suitable morphism in terms of the primitive constructs and
the morphisms immediately available in each subtask. The primitive
constructs include $\mathrm{id}$, $f \circ g$, $\left\langle f,g \right\rangle$, $\mathtt{fst}$, $\mathtt{snd}$, $\mathtt{inl}$, $\mathtt{inr}$, $\left\{ f,g \right\}$, $\lambda(f)$ and $\mathtt{map}$.

 * *Reflexivity*, write down a morphism from $\Gamma^+ \times P^{\ast}$ to $P^{\ast}$.
 * *Contraction*, write down a morphism from $\Gamma^{ +} \times P^{\ast}$ to $Q^{\ast}$ in terms of
   a morphism $f \colon (\Gamma^{ +}\times P^{\ast})\times P^{\ast} \to Q^{\ast}$.
 * *Weakening*, write down a morphism from $\Gamma^{ +} \times P^{\ast}$ to $Q^{\ast}$ in terms of a
   morphism $f \colon \Gamma^{ +} \to Q^{\ast}$.
 * *Exchange*, write down a morphism from $(\Gamma^{ +}\times Q^{\ast}) \times P^{\ast}$ to $R^{\ast}$ in terms
   of a morphism $f \colon (\Gamma^{ +}\times P^{\ast}) \times Q^{\ast} \to R^{\ast}$.
 * *Substitution*, write down a morphism from $\Gamma^{ +}$ to $Q^{\ast}$ in terms of two 
   morphisms $f \colon \Gamma^{ +}\to P^{\ast}$ and $g\colon \Gamma^{ +}\times P^{\ast} \to Q^{\ast}$.
#+end_statement

*** TODO Task 2
*** TODO Task 3
*** TODO Bonus Task 1
*** TODO Task 4
*** TODO Task 5
*** TODO Task 6
* Bibliography
 * Awodey, Category theory.
 * Programming in Martin-LÃ¶f Type theory.
 * Homotopy Type Theory book.
