#+TITLE: Fields lectures
#+AUTHOR: Mario Román

#+LANGUAGE: en
#+SETUPFILE: essay.setup
#+SETUPFILE: math-en.setup
#+SETUPFILE: html.setup
#+OPTIONS: broken-links:mark num:nil


http://www.fields.utoronto.ca/video-archive//event/2012/2016

* [May 16] Michael Shulman: synthetic homotopy theory
It shows a proof of the equality between integers and the foundamental
group of the circle.

** Introduction: type theory
Homotopy type theory is a variation on ML-TT with Higher inductive
types and univalence. In type theory we have

 - types,
 - terms,
 - type constructors, like Pi or Sigma,
 - several universes

From the homotopic point of view, we think of types as spaces or
groupoids. A type family is a homotopy-theoretic fibration: if
we have $B : A \to {\cal U}$, $B(x)$ is the fiber over $x : A$.

** Identity types
Identity types provide the groupoid structure to a type. Equalities
are paths between two points of a type.

 - Leibniz/Lawvere/Martin-Lof notion. The family of equality types for
   any given type is freely generated by the reflexivity path.

*** Why does this work? How can exist non-trivial paths?
The space of paths with a fixed endpoint is contractible. There are no
paths but reflexivity. Every path can be retracted back to
reflexivity.  You can use the Yoneda lemma here; the hom functor is
determined by the identity map.

*** Homotopy structure
Any type has an internal homotopy structure

** Observational/definitional/cubicaal approach
The meaning of the identity type is defined recursively on the
structure of the type A. For example, if we have a product type,
two pairs are equal if their components are equal.

We have operations of transport defined in terms of the structure of
the type.

** n-types & propositions
We regard types as representing propositions, things that we can prove;
and elements of a type are their proofs.

 - A type is a proposition if every two elements of that type are
   propositionally equal.

Note that propositional equalities have nothing to do with these mere
propositions.

*** Propositional truncation
A type such that every map from a type factors uniquely throught its
propositional truncation.
** Synthetic homotopy theory
Synthetic homotopy theory is the study in HoTT of properties of types
that traditionally belong to homotopy spaces. We view types as spaces
and we try to apply ideas from homotopy theory.

For example, we classically define the homotopy group of a space as a
map from the sphere to a space.

We can define the loop space of a type. If we iterate over this, we get
higher homotopy groups. The zero truncation of these types gives us the
homotopy paths.

*** Traditional vs synthetic
Traditional

 - spaces are sets of points,

Synthetic

 - spaces are fundamental notions,
 - paths are fundamental notions.

Synthetic homotopy theory models other homotopy theories, things like
higher toposes are expected to be models of this theory.

** Our tools: HITs and univalence
HITs give us a way to construct spaces in type theory.

In classical homotopy theory we have cell-complexes and we use them to
build complicated spaces. A higher inductive is a cell-complex what an
inductive type is a 0-dimensional cell-complex.

The circle can be constructed directly as a HIT.

We can prove that
\[
\Omega(\mathbb{S}^1, \mathrm{base}) = \mathbb{Z},
\]
by defining a map from the integers to the paths, $n \mapsto \mathrm{loop}^n$.

We need the UA in order to create the converse function.
* [May 19] Thorsten Altenkirch: why does homotopy type theory matter?

 * *Realist* foundation of mathematics. Mathematical objects are real
   things instead of constructed notions. We use sets.

 * *Constructivist* foundation of mathematics. We are not basing this
   in real objects, we are only communicating ideas. Type theory can be
   thought of as an implementation of constructivism.

   * We can reason about propositions.
   * We use types instead of sets.

We can translate propositions as types, and this is not a sintactic
trick but a new way of understanding a proposition. If we use types
instead of sets, we have to introduce types and terms from that type
at the same time. There is no way to reference untyped objects.

\[
\mathtt{Bool} \cong \mathtt{Prop},
\]

if and only if the LEM holds.

** What has homotopy theory ever done for us?
In Martin-Löf first version, membership was impredicative. Then he
introduced extensional type theory; and then later he introduced
intensional type theory.

 - Programming in Martin-Lof's type theory, Nordström.

In intensional type theory, two objects are equal only if they are
defined the same way; that is a problem. These two functions

 - $\lambda x.x + 0$,
 - $\lambda x.0+x$, 

for example, are not equal.

** Setoids
Setoids are a way to solve the problem with intensional type theory.
A setoid is a type with some equivalence relation. From any two
setoids $A,B$, we can define a new setoid $A \to B$ whose functions
must preserve the equivalence relation. That is, we can translate the
usual type constructors into setoid constructors.

** TODO Setoid interpretation
