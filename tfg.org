#+TITLE: Category theory and lambda calculus
#+AUTHOR: Mario Román
#+EMAIL: mromang08@gmail.com

#+OPTIONS: broken-links:mark num:nil
#+LANGUAGE: es
#+SETUPFILE: essay.setup
#+SETUPFILE: math.setup
#+SETUPFILE: html.setup

* Journal
** <2017-05-31 Wed>
*** created this file.
*** read MacLane chapter III.2.
** <2017-06-01 Thu>
*** read https://golem.ph.utexas.edu/category/2006/08/cartesian_closed_categories_an_1.html
:LOGBOOK:
CLOCK: [2017-06-01 Thu 10:30]--[2017-06-01 Thu 10:55] =>  0:25
:END:
*** started reading chapter 4 on Lecture Notes on the lambda calculus by Selinger
*** superficial complete lecture of Selinger
** <2017-06-02 Fri>
*** read https://bartoszmilewski.com/2016/11/21/monads-programmers-definition/
*** read multiple sections of MacLane
*** wrote a mikrokosmos section
** <2017-06-03 Sat>
*** read MacLane. Yoneda Lemma
*** exercises from MacLane
** <2017-06-04 Sun>
*** read I.1.1 to I.1.6 of Hott book
* Notes
** [[file:categoriesfortheworking.org][Categories for the working mathematician - MacLane]]
** [[file:lecturesonthelambdacalculus.org][Lecture notes on the lambda calculus - Selinger]]
** [[file:homotopytypetheory.org][Homotopy type theory - Univalent foundations]]
* Resources
** Books on categories and types for the TFG
*** Books on category theory
**** [[http://www.maths.ed.ac.uk/~aar/papers/maclanecat.pdf][Categories for the working mathematician - Saunders Mac Lane]]
A complete course on category theory.

  * Category theory.
  * Monoidal categories.
  * 2-categories.

**** [[https://github.com/Mzk-Levi/texts/blob/master/Lambek%2520J.,%2520Scott%2520P.J.%2520Introduction%2520to%2520Higher%2520Order%2520Categorical%2520Logic.pdf][Introduction to Higher order categorical logic - Lambek]]
A course in categorical logic.

  * Cartesian closed categories.
  * Type theory and toposes.

**** [[https://s3.amazonaws.com/arena-attachments/325201/2ff932bf546d8985eb613fccf02b69c7.pdf][Conceptual Mathematics: a first introduction to categories - Lawvere]]
A course on category theory, oriented towards categorical logic.

  * Basic cateogory theory
  * Categorical logic, toposes

**** [[http://paultaylor.eu/prafm/][Practical foundations of Mathematics - Paul Taylor]]
A type-oriented foundation of mathematics.

  * Type theory.
  * Cartesian closed categories.
  * Algebra of dependent types.

**** [[http://tocs.ulb.tu-darmstadt.de/35821485.pdf][Sheaves in Geometry and Logic - MacLane, Moerdijk]]
A course on sheaves, topoi and logic. It assumes a categorical background.

  * Grothendieck topologies and sheaves.
  * Topoi and logic.
  * Classifying topoi.

**** [[http://www.mathematik.tu-darmstadt.de/~streicher/CTCL.pdf][Introduction to category theory and categorical logic - Thomas Streicher]]
Basic notions of category theory and a bit on \lambda-calculus,
cartesian-closed categories and toposes.

  * Basic category theory
  * Cartesian closed categories and \lambda-calculus
  * Logic of toposes
  
**** An introduction to topos theory - Kostecki
**** [[http://www.tac.mta.ca/tac/reprints/articles/12/tr12.pdf][Toposes, Triples and Theories - Barr & Wells]]
*** Books on \lambda-calculus
**** [[http://pages.di.unipi.it/ferrari/CORSI/PR2/HarperBook.pdf][Practical foundations for Programming Languages - Robert Harper]]
A complete course on types, syntax and programming languages.

  * Judgements and rules.
  * Levels of syntax.
  * Data types.
  * System F.
  * Types and propositions.
  * Laziness, paralellism and concurrency.

**** Types and programming languages - Benjamin C. Pierce
**** [[http://www.mscs.dal.ca/~selinger/papers/lambdanotes.pdf][Lecture notes on the lambda calculus - Peter Selinger]]
**** [[https://homotopytypetheory.org/book/][Homotopy Type Theory Book - The univalent foundations program]]
The foundational book on homotopy type theory.
**** [[http://pds14.egloos.com/pds/200901/16/93/Lambda-Calculus_and_Combinators.pdf][Lambda Calculus and Combinators. An Introduction - Hindley, Seldin]]
Basic introduction to the \lambda-calculus.

  * Combinatory logic.
  * Formal theories of \lambda-calculus.
  * Typing.
  * Models of \lambda-calculus.

**** [[http://www.cse.chalmers.se/research/group/logic/book/book.pdf][Programming in Martin-Löf's Type Theory - Nordström, Petersson]]
Martin-Löf type theory and how to write languages based on it.
Based on sets.

**** [[https://github.com/pigworker/CS410-14][CS410 Advanced Functional Programming - Connor McBride]]
A course on Agda.

  * Propositions as types.
  * Dependent types.
**** Software foundations - Benjamin C. 
** Blog articles
*** [[https://www.quora.com/What-is-the-best-textbook-for-Category-theory][What is the best textbook for category theory - Edward Kmett]]
*** DONE [[https://golem.ph.utexas.edu/category/2006/08/cartesian_closed_categories_an_1.html][CCCs and the λ-calculus | The n-Category Café]]               :math:
*** [[https://github.com/mattearnshaw/lawvere][mattearnshaw/lawvere: The collected works of F. W. Lawvere]] :logic:math:
*** [[https://www.cs.cmu.edu/~rwh/][Robert Harper's Home Page]]                                  :math:logic:
*** [[http://www.jonmsterling.com/index.html][Notes from Jon Sterling Thought]]                 :math:logic:philosophy:
*** [[http://www2.tcs.ifi.lmu.de/~abel/MscThesisJoakimOhman.pdf][MscThesisJoakimOhman.pdf]] A logical relation for dependent type theory :mikrokosmos:types:logic:
Talks about identity types.
*** [[https://mathoverflow.net/questions/152497/formalizations-of-category-theory-in-proof-assistants][Formalizations of category theory in proof assistants - MathOverflow]] 
*** [[http://strictlypositive.org/Easy.pdf][Easy.pdf]] Simply Easy! - Conor McBride                :mikrokosmos:math:
*** [[https://github.com/lambda-pi-plus/lambda-pi-plus][lambda-pi-plus: A simple Depdently-Typed Language for Research&Learning]] :mikrokosmos:math:
*** [[http://strictlypositive.org/Easy.pdf][Easy.pdf]] Implementation of dependent lambda calculus :math:logic:mikrokosmos:
*** [[https://www2.eecs.berkeley.edu/Pubs/TechRpts/2007/EECS-2007-113.pdf][EECS-2007-113.pdf]] Adam Chipala - Implementing dependent types :types:math:logic:
*** [[http://math.andrej.com/2012/11/08/how-to-implement-dependent-type-theory-i/][How to implement dependent type theory I | Mathematics and Computation]] :math:types:
*** [[http://www.hedonisticlearning.com/posts/category-theory-syntactically.html][Category Theory, Syntactically ]]                            :math:logic:
*** [[https://github.com/Mzk-Levi/texts][Mzk-Levi/texts]] - Type theory and categorical logic texts :math:types:categories:
*** [[http://www.cs.ru.nl/B.Jacobs/CLT/bookinfo.html][Categorical Logic and Type Theory]]               :math:categories:logic:
*** [[https://www.newton.ac.uk/event/bprw01][Computer-aided mathematical proofs]]                   :types:logic:math:
*** [[http://math.ucr.edu/home/baez/topos.html][Topos theory in a nutshell]]
*** [[http://www.logicmatters.net/tyl/][Logic matters]]
*** [[https://mathoverflow.net/questions/69251/is-mac-lane-still-the-best-place-to-learn-category-theory/70891#70891][Is MacLane still the best place to learn category theory?]]
** Articles
*** TODO [[http://imps.mcmaster.ca/doc/seven-virtues.pdf][seven-virtues]] Seven virtues of type theory
* Tasks
** TODO Adjoint functors post
** TODO Church-Rosser post
** TODO Wikipedia article Church-Rosser
** TODO Ask for a type theory book on SO
** TODO Ask for a category theory + lambda calculus book on SO
* Mikrokosmos
Mikrokosmos is a lambda calculus interpreter.

** Seminars about mikrokosmos
** Dependent types
http://math.andrej.com/2012/11/08/how-to-implement-dependent-type-theory-i/

** A module system for mikrokosmos
Un sistema simple de =import= de módulos que incluya varias definiciones en el árbol
si no están ya.

** Online interpreter
Is there a Sinatra equivalent for Haskell?

** Use a .mikrokosmos config file
Is it really necessary?

** Config files
A simply typed mikroskosmos would be great for writing configuration files.

** compiling mikrokosmos
It could be compiled to C.

** Optimizing mikrokosmos in Agda
It seems very difficult to write a mikrokosmos interpreter on Agda.

** TODO The IO problem
How to declare an imperative - Wadler

*** syscall proposal
**** Output
#+BEGIN_SRC 
#printNum (\s.\z.(s (s z)))
#+END_SRC

printNum.hs
#+BEGIN_SRC haskell
num :: Lambda -> Int
num Nil = 0
num (Lambda x s) = 1 + printnum s

main :: IO ()
main = do
  l <- read :: Lambda
  print $ printnum l
  return ()
#+END_SRC

**** Input
#+BEGIN_SRC
#readNum ()
#+END_SRC

*** syscall with literals
Add a "literal" type.

**** Output
#+BEGIN_SRC mikrokosmos
churchLiteral n = n (\k . syscall ("increment.sh" k)) "0"
printLiteral l = syscall2 ""
#+END_SRC

**** Input
It would use =$= as an antiliteral. Any string started on =$= would be interpreted as
a lambda term.

#+BEGIN_SRC mikrokosmos
readChurch = syscall "readChurch"
#+END_SRC

=readChurch= would return something as ="@(\s.\z.s (s (s z)))"=. Two literals applied one
over thw other would be reinterpreted as their concatenation.

