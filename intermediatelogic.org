#+TITLE: Intermediate logic
#+DESCRIPTION: Open Logic - Richard Zach

#+SETUPFILE: config.setup
#+SETUPFILE: essay.setup
#+LANGUAGE: en,es
#+OPTIONS: toc:nil
#+TODO: TODO WIP | CHECK DONE

#+latex_header: \usepackage{bussproofs}
#+latex_header: \EnableBpAbbreviations
#+latex_header: \usepackage{tikz-cd}
#+latex_header: \newcommand\land{\wedge}
#+latex_header: \newcommand\lor{\vee}
#+latex_header: \newcommand\model{\mathfrak{M}}
#+latex_header: \newcommand\entail{\models}
#+latex_header: \newcommand\seq{\Rightarrow}

* II. First-order logic
** 5. Syntax and Semantics
*** 5.1. Introduction
 - Syntax :: how well-formed terms and formulas can be defined.
 - Semantics :: how meaning can be given to expressions.

*** 5.2. First-order languages
Any first-order language ${\cal L}$ is determined by logical, non-logical
symbols and some punctuation marks.

**** Logical symbols
 1. Logical connectives: $\neg,\land,\lor,\forall,\exists$,
 2. Propositional constant for falsity: $\bot$,
 3. Binary identity predicate: $=$,
 4. Numerable set of variables: e$v_0,v_1,\dots$

We assume $\top$ and $\leftrightarrow$ as defined as abbreviatures. We could use 
"truth functionally complete" subsets of boolean operators such
as $\{\neg,\lor\}$.

**** Non-logical symbols
 1. A numerable set of n-ary predicates for each $n>0$, as $\{A_0^n,A_1^n,\dots\}$,
 2. A numerable set of constants $c_0,\dots$,
 3. A numerable set of n-ary functions, as $\{f_0^n,f_1^n,\dots\}$.

**** Examples
 - Arithmetic with $S,O,<,+,\times$.
 - Set theory with $\in$.
 - Orders with $\leq$.

*** 5.3. Terms and formulas
**** Terms
The set of *terms* of a language ${\cal L}$ is defined inductively

 1. variables are terms,
 2. constants are terms,
 3. given an n-ary function and $n$ terms, $f(t_1,\dots,t_n)$
    is a term.

Constants are regarded as 0-ary functions.

**** Formulas
The set of *formulas* of a language ${\cal L}$ is defined inductively

 1. $\bot$ is a formula;
 2. given any n-ary predicate and $n$ terms, $R(t_1,\dots,t_n)$ is
    a formula;
 3. given any two terms, $t_1 = t_{2}$ is a formula;
 4. $\neg \varphi$;
 5. $\varphi \lor \psi$;
 6. $\varphi \land \psi$;
 7. $\varphi \to \psi$;
 8. $\forall x. \varphi$;
 9. $\exists x.\varphi$.

**** Syntatic identity
Two strings of symbols are syntatically identical, $\varphi \equiv \psi$, if
they contain the same symbols in the same place.

*** 5.4. Unique readability
Every formula has a unique reading. The correct definitions, using
parentheses constraint the set of possible formulas.  The number of
left and right parentheses in a formula are equal, by induction.

**** Proper prefixes
A string $\varphi$ is a *proper prefix* of $\psi$ if it can be obtained by 
appending symbols to $\varphi$.

#+ATTR_LATEX: :options []
#+BEGIN_lemma
Every proper prefix of a formula is not a formula.
#+END_lemma
#+BEGIN_proof
Using the fact that there is an equal number of left and right
parentheses in every formula.
#+END_proof

**** Unique readability
Every atomic formula satisfies one and only one of the following
conditions

 1. $\varphi \equiv \bot$
 2. $\varphi \equiv R(t_1,\dots,t_n)$
 3. $\varphi \equiv t_1 = t_2$

And every formula is of the form

 1. atomic
 2. $\neg \psi$
 3. $\varphi \lor \psi$
 4. $\varphi \land \psi$
 5. $\psi \to \varphi$
 6. $\forall x.\psi$
 7. $\exists x.\psi$

The proof crucially uses the fact that no formula is a proper prefix
of any other formula.

*** 5.5. Main operator of a formula
The outermost operator of a formula exists if the formula is not
atomic. It is always unique, as we have proved earlier.

*** 5.6. Subformulas
**** Immediate subformulas
*Immediate subformulas* are defined inductively as

 1. no subformulas for atomic formulas;
 2. $\varphi$ and $\psi$ are immediate subformulas of $\varphi \ast \psi$;
 3. $\psi$ is an immediate subformula of $\forall x.\psi$;
 4. $\psi$ is an immediate subformula of $\exists x.\psi$.

**** Proper subformulas
The *proper subformulas* of a formula are its immediate subformulas and
their proper subformulas.

We also consider the formula to be a non-proper subformula of itself.

*** 5.7. Free variables and sentences
A variable appears *free* when it is not bounded by a quantifier. The
precise definition can be trivially written by induction. Every
bounded variable has a *scope*, a subformula over which the quantifier
acts.

**** Sentences
A formula is a *sentence* if it contains no free ocurrences of variables.

*** 5.8. Substitution
*Substitution* of a variable by a term, $s[t/x]$, can be recursively
defined as

 * $c[t/x]$ is $c$, provided $c$ is a constant;
 * $y[t/x]$ is $y$, provided $y$ is a variable;
 * $x[t/x]$ is $t$;
 * $f(t_1,\dots,t_n)[t/x]$ is $f(t_1[t/x],\dots,t_n[t/x])$.

Substitution can be extended trivially to formulas; but we have to
check that every term appears free for the variable in order to avoid
undesired bounds for a variable.

*** 5.9. Structures for first-order languages
*Structures* are the basis for /semantic notions/. A structure $\model$ for
a language ${\cal L}$ consists of

 1. a *domain*, a non empty set $|\model|$;
 2. an interpretation for each *constant*, $c^{\model} \in |\model|$;
 3. an interpretation for each *predicate*, $R^{\model} \subseteq |\model|^n$;
 4. an interpretation for each *function*, $f^{\model} \colon |\model|^n\to |\model|$.

Non emptiness ensures that the existential generalization is sound.

**** Examples
 - Standard model of arithmetic.
 - Structure of hereditarily finite sets.

*** 5.10. Covered structures for first-order languages
**** Values
The value of a term is defined recursively as

 * $\mathrm{Val}^{\model}(c) = c^{\model}$;
 * $\mathrm{Val}^{\model}(f(t_1,\dots,t_n)) = f^{\model}(\mathrm{Val}^{\model}(t_1),\dots \mathrm{Val}^{\model}(t_n))$.

**** Covered structures
A structure is covered if every element is the value of some
closed term.

*** 5.11. Satisfaction of a formula in a structure
**** Satisfaction
A formula is *satisfied* in a structure if the interpretation makes
the formula true.

**** Variable assignment
A problem with quantifiers arise when we try to interpret free variables.
We need to define *variable assignments*, functions $s : \mathrm{Var} \to |\model|$.

The value of a variable $x$ under an assignment $s$ is given by $s(x)$.

**** x-Variant
Any variable assignment $s'$ which differs from $s$ at most in one variable $x$ is
called an *x-variant*, and written as $s \sim_x s'$.

**** Satisfaction
*Satisfaction* of a formula $\varphi$ in a structure $\model$ relative to a variable
assignment $s$; written as $\model,s \models \varphi$ is defined recursively as

 1. $\model,s \not\models \bot$;
 2. $\model, s \models R(t_1,\dots,t_n)$ iff $\langle \mathrm{Val}^{\model}_s(t_1),\dots,\mathrm{Val}^{\model}_s(t_n) \rangle \in R^{\model}$;
 3. $\model,s \models t_1 = t_2$ iff $\mathrm{Val}^{\model}_s(t_1) = \mathrm{Val}^{\model}_s(t_2)$;
 4. $\model,s \models \neg\varphi$ iff $\model,s \not\models \varphi$;
 5. $\model,s \models \varphi \land \psi$ iff $\model,s \models \varphi$ and $\model,s \models \psi$;
 6. $\model,s \models \varphi \lor \psi$ iff $\model,s \models \varphi$ or $\model,s \models \psi$;
 7. $\model,s \models \varphi \to \psi$ iff  $\model,s \not\models \varphi$ or $\model,s \models \psi$;
 8. $\model,s \models \forall x. \varphi$ iff $\model,s' \models \varphi$ for every x-variant $s'$;
 9. $\model,s \models \exists x. \varphi$ iff $\model,s' \models \varphi$ for some x-variant $s'$;

Variable assignments are crucial here because we have to define a
formula for every $a \in |\model|$, but $a$ is not a formula.

*** 5.12. Variable assignments
Two assignments assigning the same value to the same free variables
produce the same values and entail the same formulas. In particular,
in the case of *sentences* without free variables, the truth value
is independent of the variable assignment.

**** Independence of variables in values
#+BEGIN_proposition
If $t$ has variables among $x_1,\dots,x_n$ and $s_1(x_i) = s_2(x_i)$; then
$\mathrm{Val}^{\model}_{s_1}(t) = \mathrm{Val}^{\model}_{s_2}(t)$.
#+END_proposition

Trivially by induction.

**** Independence of variables in formulas
#+BEGIN_proposition
If $\varphi$ has variables among $x_1,\dots,x_n$ and $s_1(x_i) = s_2(x_i)$; then
$\model,s_1 \models \varphi$ iff $\model,s_2 \models \varphi$.
#+END_proposition

Again by induction.

**** Satisfaction in a structure
A structure $\model$ *satisfies* $\varphi$, and it is written as $\model \models \varphi$, if
$\model, s \models \varphi$ for all variable assignments $s$.

*** 5.13. Extensionality
Where two structures agree on all elements, they entail the same truth
values. If $\model_1$ and $\model_2$ agree on constants, relations and functions;
$\model_1,s \models \varphi$ iff $\model_2,s \models \varphi$.

In particular, this happens for any sentence.

**** Dependence on subterms for values
Given a structure $\model$ and $s$ with $s \sim_x s'$ given by $s'(x) = \mathrm{Val}^{\model}_s(t')$.
Then $\mathrm{Val}^{\model}_s(t[t'/x]) = \mathrm{Val}^{\model}_{s'}(t)$.

***** Proof by induction
**** Dependence on subterms for formulas
Given a structure $\model$ and $s$ with $s \sim_x s'$ given by $s'(x) = \mathrm{Val}^{\model}_s(t)$.
Then $\model,s \models \varphi[t/x]$ iff $\model,s' \models \varphi$.

*** 5.14. Semantics notions
Semantic properties.

**** Validity
$\varphi$ is *valid*, written $\models \varphi$ iff $\model \models \varphi$ for every structure $\model$.

**** Entailment
A set of sentences $\Gamma$ *entails* $\varphi$, written $\Gamma \models \varphi$ iff $\model \models \varphi$ for
every structure such that $\model \models \Gamma$.

**** Satisfiability
A set of sentences $\Gamma$ is *satisfiable* if $\model \models \Gamma$ for some structure
$\model$.

**** Validity and entailment
A sentence $\varphi$ is valid iff $\Gamma \models \varphi$ for any set of sentences $\Gamma$.

**** Satisfiability and entailment
$\Gamma \models \varphi$ iff $\Gamma \cup \{\neg \varphi\}$ is unsatisfiable.

**** Strengthening
If $\Gamma \subseteq \Gamma'$ and $\Gamma \models \varphi$, then $\Gamma' \models \varphi$.

**** Semantic deduction theorem
$\Gamma \cup \{\varphi\} \models \psi$ iff $\Gamma \models \varphi \to \psi$.

**** Quantifiers and entailment
 1. $\varphi(t) \entail\exists x.\varphi(x)$,
 2. $\forall x. \varphi(x) \entail \varphi(t)$.
** 6. Theories and their models
*** 6.1. Introduction
**** Closure
A set of sentences $\Gamma$ is *closed* if it is equal to its closure,
$\{ \varphi : \Gamma \models \varphi\}$. $\Gamma$ is *axiomatized* by $\Delta$ if it is its closure.

*** 6.2. Expressing properties of structures
**** Model
The structure $\model$ is a *model* of $\Gamma$ if $\model \models \varphi$ for all $\varphi \in \Gamma$.

*** 6.3. Examples of first-order theories
**** Strict linear orders
**** Theory of groups
**** Peano arithmetic with induction schemas
**** Pure sets with naive comprehension schemes
*** 6.4. Expressing relations in a structure
A formula $\varphi(v_1,\dots,v_n)$ expresses the relation $R \subseteq |\model|^n$ if
\[
Ra_1\dots a_n
\quad\mbox{ iff }\quad
\model,s \models \varphi(v_1,\dots,v_n)
\]
for any variable assignment such that $s(v_i) = a_i$.

*** 6.5. The theory of sets
ZFC is the most widely studied axiomatic system for set theory.
Inclusion can be defined by defining membership, and sets have
to be implicitely defined.

For example, the empty set $\varnothing$ is defined with
\[
\exists x. (\neg \exists y. y \in x) \land (\forall z. x \subseteq z)
\]
and operations on set could be defined in the same way.

The comprehension principle is inconsistent (Russell's paradox),
therefore, ZFC only allows the separation principle,
\[
\forall z. \exists y. \forall x. (x \in y \leftrightarrow (x \in z \land \varphi(x))).
\]

*** 6.6. Expressing the size of structures
There are sentences which are true in a structure iff the domain
has a specific size. The property of being non-enumerable or being
finite cannot be expressed even with an infinite set of sentences
(Löwenheim-Skolem theorems).

* III. Proofs and completeness
** 7. The Sequent Calculus
*** 7.1. Rules and derivations
**** 7.1. Sequent
A *sequent* is an expression $\Gamma \seq \Delta$ between sequences of
sentences. Semantically, it means that, if $\Gamma = \left\langle \varphi_1,\dots,\varphi_n \right\rangle$
and $\Delta = \left\langle \psi_1,\dots,\psi_m \right\rangle$,

\[
(\varphi_1 \land \dots \land \varphi_n) \to
(\psi_1 \lor \dots \lor \psi_m).
\]

**** 7.2. Initial sequent
An *initial sequent* is of the form

 1. $\varphi \seq \varphi$
 2. $\bot \seq$

where $\varphi$ is a sentence.

*** 7.2. Propositional rules
**** Rules for negation
Formation (L)

\[\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta,\varphi$
\UI$\neg \varphi, \Gamma \fCenter\seq \Delta$
\end{prooftree}\]

Formation (R)

\begin{prooftree}
\AX$\varphi, \Gamma \fCenter\seq \Delta$
\UI$\Gamma \fCenter\seq \Delta,\neg \varphi$
\end{prooftree}

**** Rules for conjunction
Formation (L)

\begin{prooftree}
\AX$\varphi, \Gamma \fCenter\seq \Delta$
\UI$\varphi \land \psi, \Gamma \fCenter\seq \Delta$
\end{prooftree}

Formation (R)

\begin{prooftree}
\AXC{$\Gamma \seq \Delta,\varphi$}
\AXC{$\Gamma \seq \Delta,\psi$}
\BIC{$\Gamma \seq \Delta,\varphi \land \psi$}
\end{prooftree}

**** Rules for disjunction
Formation (L)

\begin{prooftree}
\AXC{$\varphi, \Gamma \seq \Delta$}
\AXC{$\psi, \Gamma \seq \Delta$}
\BIC{$\varphi \lor \psi, \Gamma \seq \Delta$}
\end{prooftree}

Formation (R)

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta,\varphi$
\UI$\Gamma \fCenter\seq \Delta,\varphi \lor \psi$
\end{prooftree}

**** Rules for implication
Formation (L)

\begin{prooftree}
\AXC{$\Gamma \seq \Delta,\varphi$}
\AXC{$\psi, \Pi \seq \Lambda$}
\BIC{$\varphi \to \psi, \Gamma, \Pi \seq \Delta,\Lambda$}
\end{prooftree}

Formation (R)

\begin{prooftree}
\AX$\varphi, \Gamma \fCenter\seq \Delta, \psi$
\UI$\Gamma \fCenter\seq \Delta, \varphi \to \psi$
\end{prooftree}

*** 7.3. Quantifier rules
**** Rules for universal quantifiers
Formation (L), where $t$ is a closed term

\begin{prooftree}
\AX$\varphi(t), \Gamma \fCenter\seq \Delta$
\UI$\forall x.\varphi(x), \Gamma \fCenter\seq \Delta$
\end{prooftree}

Formation (R), where $a$ is an *eigenvalue*; a constant which must not
occur anywhere in the lower sequent

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta, \varphi(a)$
\UI$\Gamma \fCenter\seq \Delta, \forall x.\varphi(x)$
\end{prooftree}

**** Rules for existential quantifiers
Formation (L), where $a$ is an *eigenvalue*

\begin{prooftree}
\AX$\varphi(a), \Gamma \fCenter\seq \Delta$
\UI$\exists x.\varphi(x), \Gamma \fCenter\seq \Delta$
\end{prooftree}

Formation (R), where $t$ is a closed term

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta, \varphi(t)$
\UI$\Gamma \fCenter\seq \Delta, \exists x.\varphi(x)$
\end{prooftree}

*** 7.4. Structural rules
**** Weakening
Left weakening

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta$
\UI$\varphi, \Gamma \fCenter\seq \Delta$
\end{prooftree}

Right weakening

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta$
\UI$\Gamma \fCenter\seq \Delta, \varphi$
\end{prooftree}

**** Contraction
Left contraction

\begin{prooftree}
\AX$\varphi, \varphi, \Gamma \fCenter\seq \Delta$
\UI$\varphi, \Gamma \fCenter\seq \Delta$
\end{prooftree}

Right contraction

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta, \varphi, \varphi$
\UI$\Gamma \fCenter\seq \Delta, \varphi$
\end{prooftree}

**** Exchange
Left exchange

\begin{prooftree}
\AX$\Gamma, \varphi, \psi, \Pi \fCenter\seq \Delta$
\UI$\Gamma, \psi, \varphi, \Pi \fCenter\seq \Delta$
\end{prooftree}

Right exchange

\begin{prooftree}
\AX$\Gamma \fCenter\seq \Delta, \varphi, \psi, \Lambda$
\UI$\Gamma \fCenter\seq \Delta, \psi, \varphi, \Lambda$
\end{prooftree}

**** Cut
Cut is not necessary, but makes it easier to reuse derivations

\begin{prooftree}
\AXC{$\Gamma \seq \Delta,\varphi$}
\AXC{$\varphi, \Pi \seq \Lambda$}
\BIC{$\Gamma,\Pi \seq \Delta, \Lambda$}
\end{prooftree}

It follows from the implication rule.

*** 7.5. Derivations
**** LK-derivation
An *LK-derivation* of a sequent is a tree of sequents starting from
initial sequents and applying inference rules.

*** 7.6. Examples of derivations
*** 7.7. Derivations with quantifiers
*** 7.8. Proof-theoretic notions
**** Theorems
A *theorem* is a sentence $\varphi$ such that there is a derivation of $\seq \varphi$.
We write $\vdash \varphi$ if it is a theorem and $\not\vdash \varphi$ if it is not.

**** Derivability
A sentence $\varphi$ is *derivable* from $\Gamma$ if there is a finite subset $\Gamma' \subseteq \Gamma$
such that the system derives $\Gamma \seq \varphi$. We write $\Gamma \vdash \varphi$ if $\varphi$ is derivable,
we write $\Gamma \not\vdash \varphi$ if it is not.

**** Consistency
A set of sentences $\Gamma$ is *inconsistent* if a finite subset $\Gamma' \subseteq \Gamma$ derives
$\Gamma' \seq$ . If a system is not inconsistent, it is *consistent*.

**** Reflexivity
If $\varphi \in \Gamma$, then $\Gamma \vdash \varphi$.

***** Proof
$\varphi \seq \varphi$ is an initial sequent.

**** Monotony
If $\Gamma \subseteq \Delta$ and $\Gamma \vdash \varphi$, then $\Delta \vdash \varphi$.

***** Proof
Given $\Gamma' \subseteq \Gamma \subseteq \Delta$, we know that $\Gamma' \subseteq \Delta$.

**** Transitivity
If $\Gamma \vdash \varphi$ for every $\varphi \in \Delta$ and $\Delta \vdash \psi$, then $\Gamma \vdash \varphi$.

***** Proof
If $\Delta \vdash \psi$, then there exists a finite $\Delta_0 \seq \psi$. We proceed by
induction on the size of $\Delta_0$,

 * if $\Delta_0$ is empty, $\seq \psi$ and, in particular $\Gamma \vdash \psi$;
 * if $\varphi \in \Delta_0$, we define $\Delta_1 = \Delta_0 \setminus \{\varphi\}$; and we know that $\varphi, \Delta_1 \seq \psi$,
   so $\Delta_1 \seq \varphi \to \psi$. By induction hypothesis, there exist $\Gamma_0 \seq \varphi \to \psi$
   and $\Gamma_1 \seq \varphi$; thus $\varphi \to \psi, \Gamma_1 \seq \psi$ and, by cut elimination rule,
   $\Gamma_0, \Gamma_1 \seq \psi$.

**** Principle of explosion
$\Gamma$ is inconsistent iff $\Gamma \vdash \varphi$ for every $\varphi$.

***** Proof
If $\Gamma \seq \bot$, by cut elimination, $\Gamma \seq$ . If $\Gamma \seq$ , then by
weakening, $\Gamma \seq \varphi$.

**** Compactness
 1. If $\Gamma \vdash \varphi$, there exists a subset $\Gamma_0 \subseteq \Gamma$ such that $\Gamma_0 \vdash \varphi$.
 2. If every subset of $\Gamma$ is consistent, $\Gamma$ is consistent.

***** Proof
By definition of derivability.

*** 7.9. Derivability and consistency
**** Transitivity of inconsistency
If $\Gamma \vdash \varphi$ and $\Gamma \cup \{\varphi\}$ is inconsistent, $\Gamma$ is inconsistent.

***** Proof
We have $\Gamma_0,\Gamma_1 \subseteq \Gamma$ such that $\Gamma_0 \seq \varphi$ and $\varphi, \Gamma_1 \seq$ ; thus,
by cut elimination, $\Gamma_0, \Gamma_1 \seq$.

*** 7.10. Derivability and the propositional connectives
**** Conjunction
We know that

 * $\varphi \land \psi \vdash \varphi$
 * 4$\varphi \land \psi \vdash \psi$
 * $\varphi, \psi \vdash \varphi \land \psi$

***** Proof
Applying the propositional rules for conjunction, we know that
$\varphi \land \psi \seq \varphi$ and $\varphi \land \psi \seq \psi$; while applying the right hand
side rule, $\varphi, \psi \seq \varphi \land \psi$.

**** TODO Disjunction

*** 7.11. Derivability and the quantifiers
**** Derivability of the universal quantifier
If $\Gamma \vdash \varphi(c)$ and $c$ does not appear in $\Gamma$; $\Gamma \vdash \forall x.\varphi(x)$.

***** Proof
Trivial by definition of derivability.

**** Initial derivations for quantifiers
 1. $\varphi(t) \vdash \exists x.\varphi(x)$
 2. $\forall x.\varphi(x) \vdash \varphi(t)$

***** Proof
Both are derivable from the quantifier rules.

*** 7.12. Soundness
**** Satisfaction of a sequent
A structure $\model$ *satisfies* a sequent $\Gamma \seq \Delta$ if and only if $\model \not\models \varphi$ for
some $\varphi \in \Gamma$ or $\model \models \varphi$ for some $\varphi \in \Delta$.

**** Valid sequents
A sequent is *valid* if every structure $\model$ satisfies it.

**** Soundness
If LK derives $\Theta \seq \Xi$, then it is a valid sequent.

***** Proof
By structural induction on the derivation. If it has no inferences,
it has to be an initial sequent, and $\varphi \seq \varphi$ and $\bot \seq$  are valid
sequents. In other case, we apply structural induction to get

 1. left and right weakening, trivially;
 2. left and right negation, trivially;
 3. left conjunction, trivially;
 4. right disjunction, trivially;
 5. right implication, trivially;
 6. universal quantifiers, trivially using previous lemmas;

with one premise, and

 1. cut elimination,
 2. right conjunction,
 3. left disjunction,

with two premises. All are valid by the definition of [[*Satisfaction of a sequent][satisfaction]] and
the notion of [[*Satisfaction][satisfaction]] of a formula in a structure.

** 8. The Completeness Theorem
*** 8.3. Complete consistent sets of sequences
**** Complete set
A set $\Gamma$ is *complete* iff for any sentence either $\varphi \in \Gamma$
or $\neg \varphi \in \Gamma$.

***** Membership
In particular, $\varphi \not\in \Gamma$ implies $\neg\varphi\in\Gamma$.

**** Complete consistent sets
If $\Gamma$ is complete and consistent,

 1. if $\Gamma \vdash \varphi$, then $\varphi \in \Gamma$;
 2. $\varphi \land \psi \in \Gamma$ iff $\varphi \in \Gamma$ and $\psi \in \Gamma$;
 3. $\varphi \lor \psi \in \Gamma$ iff $\varphi \in \Gamma$ or $\psi \in \Gamma$;
 4. $\varphi \to \psi \in \Gamma$ iff $\varphi \not\in \Gamma$ or $\psi \in \Gamma$.

*** 8.4. Henkin expansion
Henkin expansion adds infinitely many constant symbols to allow
existential quantifiers to be satisfied by one of these symbols.

**** Extension of consistency
If $\Gamma$ is consistent in ${\cal L}$ and we obtain a new language by adding
a numerable set of constants, ${\cal L}'$, then $\Gamma$ is consistent in ${\cal L}'$.

***** Proof
Trivial by definition of [[*Consistency][consistency]].

**** Saturated set
A set $\Gamma$ is *saturated* iff for each formula $\varphi(x) \in \mathrm{Frm}({\cal L})$ where
$x$ is a free variable, there is a constant symbol $c \in {\cal L}$ such that
$\exists x.\varphi(x) \to \varphi(c) \in \Gamma$.

**** Theta sentences
Given a language ${\cal L}'$ and an enumeration $\varphi_i(x_i)$ of formulas of ${\cal L}'$ in
which a variable $x_i$ occurs free.

Let $c_0$ be the first fresh constant symbol not in $\varphi_0(x_0)$, and $c_n$
the first fresh constant symbol not in $\theta_0,\dots,\theta_{n-1}, \varphi_n(x_n)$.

We define $\theta_n$ as $\exists x_n. \varphi_n(x_n) \to \varphi(c_n)$.

**** Extension of saturation
If $\Gamma$ is consistent, it can be extended to a saturated consistent set
$\Gamma'$.

***** Proof
Given ${\cal L}$, we get ${\cal L}'$, and then let using [[*Theta sentences][theta sentences]],

 * $\Gamma_0 = \Gamma$,
 * $\Gamma_{n+1} = \Gamma_n \cup \{\theta_n\}$,

then $\Gamma' = \bigcup \Gamma_n$ is saturated. If it were [[*Consistency][inconsistent]], empty could be
derived from a finite set of sentences, so some $\Gamma_n$ would be inconsistent.
We will show that each $\Gamma_n$ is consistent. If we had

 * $\Gamma_n \vdash \neg\{\theta_n\}$,

where $\theta_n$ is $\exists x_n.\varphi_n(x_n)$ then we would have

 * $\Gamma_n \vdash \exists x_n. \varphi_n(x_n)$,
 * $\Gamma_n \vdash \neg \varphi_n(c_n)$;

but as $c_n$ does not appear in $\Gamma_n$, $\Gamma_n \vdash \forall x.\neg \varphi_n(x)$ and then

\[
\forall x.\neg \varphi_n(x) \vdash \neg \exists x_{n}.\varphi_n(x)
\]

thus making $\Gamma_{n}$ inconsistent.

**** Complete, consistent and saturated sets
If $\Gamma$ is complete, consistent and saturated

 1. $\exists x.\varphi(x) \in \Gamma$ iff there exists $\varphi(t) \in \Gamma$, for some $t$;
 2. $\forall x.\varphi(x) \in \Gamma$ iff $\varphi(t) \in \Gamma$ for all closed $t$.

***** Proof
 1. By saturation we have $\exists x.\varphi(x) \to \varphi(c)$ for
    some $c$; then by completion, $\varphi(c) \in \Gamma$ or $\neg\varphi(c) \in \Gamma$;
    but only the first case allows consistency to be true.

    In the other direction, if $\varphi(t) \in \Gamma$, then by completion
    and consistency, $\exists x.\varphi(x) \in \Gamma$.

 2. If $\forall x.\varphi(x) \in \Gamma$, then for every $t$, by completion, we have $\varphi(t) \in \Gamma$
    or $\neg \varphi(t) \in \Gamma$; if we had $\neg\varphi(t)$, it would be inconsistent.

    In the other direction, by completion, if we had $\neg\forall x.\varphi(x) \in \Gamma$
    then we deduce $\exists x. \neg \varphi(x) \in \Gamma$, and by saturation and completion,
    again, $\neg \varphi(c) \in \Gamma$.

*** 8.5. Lindenbaum's lemma
**** Lindenbaum's lemma
Every consistent set $\Gamma'$ in a language ${\cal L}'$ can be extended to a complete
and consistent set $\Gamma^{\ast}$.

***** Proof
We take $\Gamma_0 = \Gamma'$ and we enumerate all formulas $\{\varphi_i\}$. At each step we
add $\Gamma_{n+1} = \Gamma_n \cup \{\varphi_{n}\}$ if it is consistent or $\Gamma_{n+1} = \Gamma_n \cup \{\neg\varphi_{n}\}$ 
otherwise. Let $\Gamma^{\ast} = \bigcup \Gamma_n$.

If both $\Gamma_n\cup \{\varphi_n\}$ and $\Gamma_n\cup \{\neg\varphi_n\}$ were inconsistent, $\Gamma_n$ would be
inconsistent. Thus, every subset of $\Gamma^{\ast}$ is consistent and it has to be
consistent.

*** 8.6. Construction of a model
**** Term model
Given $\Gamma^{\ast}$ complete, consistent and saturate; the *term model* $\model(\Gamma^{\ast})$ is
defined with

 1. domain $|\model(\Gamma^{\ast})|$ given by the set of closed terms;
 2. the interpretation of every constant as itself, $c^{\model(\Gamma^{\ast})} = c$;
 3. the function symbol is assigned to a function which returns the
    closed term of that function, $f^{\model(\Gamma^{\ast})}(t_1,\dots,t_n) = f(t_1,\dots,t_n)$;
 4. and if $R$ is an n-place symbol,
    \[
    \left\langle t_1,\dots,t_n \right\rangle \in R^{\model(\Gamma^{\ast})}
    \text{ iff }
    R(t_1,\dots,t_n) \in \Gamma^{\ast}.
    \]

**** TODO Term model and quantifiers
# Our model is covered

**** Truth lemma
If $\varphi$ does not contain $=$, then $\model(\Gamma^{\ast})\models \varphi$ iff $\varphi \in \Gamma^{\ast}$.

First-order logic for sets $\Gamma$ that do not contain $=$ is complete.

***** TODO Proof

*** 8.7. Identity
**** Factoring identity
Given $\Gamma^{\ast}$ a consistent and complete set in ${\cal L}$, the *relation* $\approx$ is
defined as $t \approx t'$ iff $t=t' \in \Gamma^{\ast}$.

**** TODO Properties of the new identity relation

**** Equivalence classes
Given $\Gamma^{\ast}$ a consistent and complete set in ${\cal L}$, then $t$ is a term and
$\approx$ as in the previous definition,

\[
[t]_{\approx} = \left\{ t' : t' \in \mathrm{Trm}({\cal L}), t \approx t' \right\};
\]

and $\mathrm{Trm}({\cal L})/_{\approx} = \left\{ [t]_{\approx} : t \in \mathrm{Trm}({\cal L}) \right\}$.

**** Representative term structure
*** 8.8. Completeness theorem
**** Gödel's Completeness theorem
Let $\Gamma$ be a set of sentences; if it is consistent, it is satisfiable.

***** Proof
There is a saturated $\Gamma' \supseteq \Gamma$, and there is a $\Gamma^{\ast} \supseteq \Gamma'$ consistent and
complete; while it is also saturated. If $\Gamma$ contains $=$, then we compute
the quotient to have $\model/_{\approx}\models \varphi$ iff $\varphi \in \Gamma^{\ast}$.

**** Completeness theorem, second version
For all $\Gamma$ and $\varphi$, if $\Gamma\models\varphi$, then $\Gamma \vdash \varphi$.

***** Proof
If $\Gamma \models \varphi$, then $\Gamma \cup \{\neg\varphi\}$ is unsatisfiable; by completeness theorem,
it has to be inconsistent, so $\Gamma \vdash \varphi$.

*** TODO 8.9. Compactness theorem
*** TODO 8.10. A direct proof of the compactness theorem
*** TODO 8.11. The Löwenheim-Skolem theorem
*** TODO 8.12. Overspill
