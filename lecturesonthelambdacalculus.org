#+TITLE: Lecture notes on the lambda calculus
#+DESCRIPTION: Exercises on the Peter Salinger's book

#+SETUPFILE: math-en.setup
#+SETUPFILE: html.setup
#+SETUPFILE: essay.setup
#+LANGUAGE: en
#+OPTIONS: toc:nil
#+OPTIONS: num:nil broken-links:mark
#+TODO: TODO WIP | CHECK

* 1. Introduction
* 2. The untyped lambda calculus
** 2.5. Formal definitions of \beta-reduction and \beta-equivalence
*** \beta-equivalence
The \beta-equivalence $M =_{\beta} M'$ is the symmetric transitive closure
of the \beta-reduction $\rightarrow_{\beta}$.

* 3. Programming in the untyped lambda calculus
* 4. The Church-Rosser Theorem
** 4.1. Extensionality, \eta-equivalence, and \eta-reduction
*** Extensionality principle
The *principle of extensionality* is defined as the following rule

\[\begin{prooftree}
\LeftLabel{($ext_{\forall}$)}
\AxiomC{$\forall A. M A = M' A$}
\UnaryInfC{$M = M'$}
\end{prooftree}\]

*** Single step \eta-reduction
*** Single step \beta-reduction

** 4.2. Statement of the Church-Rosser Theorem
Let $\twoheadrightarrow$ be $\twoheadrightarrow_{\beta}$ or $\twoheadrightarrow_{\beta\eta}$; and lambda terms such that $M\twoheadrightarrow N$ and $M \twoheadrightarrow P$; then
there exists a term $Z$ such that $N \twoheadrightarrow Z$ and $P \twoheadrightarrow Z$.

\[\begin{tikzcd}[column sep=small]
& M \drar[two heads] \dlar[two heads] & \\
N \drar[two heads,dashed] & & P \dlar[two heads,dashed] \\
& Z & \\
\end{tikzcd}\]

** 4.3. Preliminary remarks on the proof of the Church-Rosser theorem
*** Church-Rosser property

\[\begin{tikzcd}[column sep=small]
& M \drar[two heads] \dlar[two heads] & \\
N \drar[two heads,dashed] & & P \dlar[two heads,dashed] \\
& Z & \\
\end{tikzcd}\]

*** Semidiamond property

\[\begin{tikzcd}[column sep=small]
& M \drar[] \dlar[] & \\
N \drar[two heads,dashed] & & P \dlar[two heads,dashed] \\
& Z & \\
\end{tikzcd}\]

*** Diamond property

\[\begin{tikzcd}[column sep=small]
& M \drar[] \dlar[] & \\
N \drar[dashed] & & P \dlar[dashed] \\
& Z & \\
\end{tikzcd}\]

*** Relationship between properties
** 4.4. Proof of the Church-Rosser Theorem (Tait & Martin-LÃ¶f)
*** Parallel one-step reduction
We define the *parallel one-step reduction* as the smallest relation
satisfying

\[\begin{prooftree}
\LeftLabel{(1)}
\AxiomC{$a$}
\UnaryInfC{$x \rhd x$}
\end{prooftree}\]

\[\begin{prooftree}
\LeftLabel{(2)}
\AxiomC{$P \rhd P'$}
\AxiomC{$N \rhd N'$}
\BinaryInfC{$PN \rhd P'N'$}
\end{prooftree}\]

\[\begin{prooftree}
\LeftLabel{(3)}
\AxiomC{$N \rhd N'$}
\UnaryInfC{$\lambda x. N \rhd \lambda x.N'$}
\end{prooftree}\]

\[\begin{prooftree}
\LeftLabel{(4)}
\AxiomC{$Q \rhd Q'$}
\AxiomC{$N \rhd N'$}
\BinaryInfC{$(\lambda x. Q) N \rhd Q'[N' / x]$}
\end{prooftree}\]

\[\begin{prooftree}
\LeftLabel{(5)}
\AxiomC{$P \rhd P'$, where $x \notin \mathrm{FV}(P)$}
\AxiomC{$N \rhd N'$}
\BinaryInfC{$(\lambda x. Q) N \rhd Q'[N' / x]$}
\end{prooftree}\]

*** TODO Lemmas on the parallel one-step reduction

*** Proof of the Church-Rosser Theorem
We know that $\rhd$ satisfies the diamond property, so its reflexive transitive
closure $\rhd^{\ast}$ also satisfies it. We use now that $\rhd^{\ast}$ is the same as $\twoheadrightarrow_{\beta\eta}$ and
that the diamond property for $\twoheadrightarrow_{\beta\eta}$ is the Church-Rosser property for $\twoheadrightarrow$.

* 5. Combinatory algebras
** 5.1. Applicative structures
*** Applicative structure
An *applicative structure* $(\mathbf{A},\cdot)$ is a set with a binary operation, that
can be non-associative.

*** Polynomials of applicative structures
A *polynomial* on an applicative structure $(\mathbf{A},\cdot)$ is a formal expression built
with the binary operation on variables and coefficients. It is the set of
expressions built from the grammar

\[
t,s ::= x \mid a \mid ts,
\]

where $x$ is a variable and $a \in A$.

** 5.2. Combinatory completness
*** Combinatory completness
*** SK characterization of combinatory completness
** 5.5. Lambda algebras

* 6. Simply-typed lambda calculus, propositional logic, and the Curry-Howard isomorphism
** 6.1. Simple types and simply-typed terms
*** Basic types
We assume a set of *basic types* to exist.

*** Simple types
The set of *simple types* is given by the BNF

\[
A,B ::= \iota\mid A \to B \mid A \times B \mid 1
\]

where $\iota$ is a [[*Basic types][basic type]] and $1$ is a one-element type.

*** Raw types lambda terms
The set of *typed lambda terms* is given by the BNF

\[ \mathtt{Term} ::=
\ast \mid
x \mid
\mathtt{Term}\mathtt{Term} \mid
\lambda x^{\mathtt{Type}}. \mathtt{Term} \mid
\left\langle \mathtt{Term},\mathtt{Term} \right\rangle \mid
\pi_1 \mathtt{Term} \mid
\pi_2\mathtt{Term}
\]

where $\ast$ will be the unique element of type $1$. Besides the
previously considered term application, we now introduce a typed
lambda abstraction and an explicit construction of the pair element with
its projections.

*** Typing rules for the simply-typed lambda calculus
** 6.2. Connections to propositional logic
* 7. Weak and strong normalization
** 7.1. Definitions
** 7.2. Weak and strong normalization in typed lambda calculus
* 8. Polymorphism
System F is obtained extending the typed lambda calculus with the quantifier $\forall$.

** 8.4. Church-Rosser property
* 9. Type inference
A /type inference algorithm/ decides, given a term, whether it is typable or
not, and outputs a type if it is.

* 10. Denotational semantics
Denotational semantics give an interpretation of the lambda calculus using
mathematical objects.

* 11. The language PCF
* 12. Complete partial orders
* 13. Denotational semantics of PCF
